{"version":3,"file":"static/js/9405.18459025.chunk.js","mappings":"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","sources":["../node_modules/lodash/now.js","../node_modules/compute-scroll-into-view/src/index.ts","../node_modules/scroll-into-view-if-needed/es/index.js","../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/slate-react/src/utils/environment.ts","../node_modules/slate-react/src/hooks/use-isomorphic-layout-effect.ts","../node_modules/slate-react/src/components/string.tsx","../node_modules/slate-react/src/utils/weak-maps.ts","../node_modules/slate-react/src/components/leaf.tsx","../node_modules/slate-react/src/utils/range-list.ts","../node_modules/slate-react/src/hooks/use-content-key.ts","../node_modules/slate-react/src/components/text.tsx","../node_modules/slate-react/src/components/element.tsx","../node_modules/slate-react/src/hooks/use-slate-static.tsx","../node_modules/slate-react/src/hooks/use-selected.ts","../node_modules/slate-react/src/hooks/use-children.tsx","../node_modules/slate-react/src/utils/hotkeys.ts","../node_modules/slate-react/src/hooks/use-read-only.ts","../node_modules/slate-react/src/hooks/use-slate.tsx","../node_modules/slate-react/src/hooks/use-decorate.ts","../node_modules/slate-react/src/utils/dom.ts","../node_modules/slate-react/src/components/editable.tsx","../node_modules/slate-react/src/components/android/diff-text.ts","../node_modules/slate-react/src/utils/key.ts","../node_modules/slate-react/src/plugin/react-editor.ts","../node_modules/slate-react/src/components/android/android-input-manager.ts","../node_modules/slate-react/src/components/android/mutation-detection.ts","../node_modules/slate-react/src/components/android/use-mutation-observer.ts","../node_modules/slate-react/src/components/android/use-restore-dom.tsx","../node_modules/slate-react/src/components/android/use-android-input-manager.ts","../node_modules/slate-react/src/components/android/use-track-user-input.ts","../node_modules/slate-react/src/components/android/android-editable.tsx","../node_modules/slate-react/src/hooks/use-focused.ts","../node_modules/slate-react/src/hooks/use-slate-selector.tsx","../node_modules/slate-react/src/components/slate.tsx","../node_modules/slate-react/src/utils/lines.ts","../node_modules/slate-react/src/plugin/with-react.ts","../node_modules/slate-react/src/index.ts","../node_modules/slate-react/src/utils/constants.ts","../node_modules/lodash/_trimmedEndIndex.js","../node_modules/lodash/isSymbol.js","../node_modules/direction/index.js","../node_modules/lodash/toNumber.js","../../../src/components/DialogVisibleProvider.tsx","../node_modules/lodash/_baseTrim.js","../node_modules/lodash/throttle.js","../node_modules/slate-react/node_modules/is-hotkey/lib/index.js","../node_modules/lodash/debounce.js"],"sourcesContent":["var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n// add support for visualViewport object currently implemented in chrome\ninterface visualViewport {\n  height: number\n  width: number\n}\n\ntype ScrollLogicalPosition = 'start' | 'center' | 'end' | 'nearest'\n// This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\ntype ScrollMode = 'always' | 'if-needed'\n// New option that skips auto-scrolling all nodes with overflow: hidden set\n// See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\ntype SkipOverflowHiddenElements = boolean\n\ninterface Options {\n  block?: ScrollLogicalPosition\n  inline?: ScrollLogicalPosition\n  scrollMode?: ScrollMode\n  boundary?: CustomScrollBoundary\n  skipOverflowHiddenElements?: SkipOverflowHiddenElements\n}\n\n// Custom behavior, not in any spec\ntype CustomScrollBoundaryCallback = (parent: Element) => boolean\ntype CustomScrollBoundary = Element | CustomScrollBoundaryCallback | null\ninterface CustomScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nfunction isElement(el: any): el is Element {\n  return typeof el === 'object' && el != null && el.nodeType === 1\n}\n\nfunction canOverflow(\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nfunction getFrameElement(el: Element) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nfunction isHiddenByFrame(el: Element): boolean {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nfunction isScrollable(el: Element, skipOverflowHiddenElements?: boolean) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nfunction alignNearest(\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nfunction getParentElement(element: Node): Element | null {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\nexport default (target: Element, options: Options): CustomScrollAction[] => {\n  //TODO: remove this hack when microbundle will support typescript >= 4.0\n  const windowWithViewport = window as unknown as Window & {\n    visualViewport: visualViewport\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.width\n    : innerWidth\n  const viewportHeight = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.height\n    : innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  const viewportX = window.scrollX || pageXOffset\n  const viewportY = window.scrollY || pageYOffset\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: CustomScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll / scaleY,\n          frame.scrollHeight - height / scaleY + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll / scaleX,\n          frame.scrollWidth - width / scaleX + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n","import compute from 'compute-scroll-into-view';\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n      top = _ref.top,\n      left = _ref.left;\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n  if (isOptionsObject(options)) {\n    return options;\n  }\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\nfunction scrollIntoView(target, options) {\n  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(isTargetAttached ? compute(target, options) : []);\n  }\n  if (!isTargetAttached) {\n    return;\n  }\n  var computeOptions = getOptions(options);\n  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);\n}\nexport default scrollIntoView;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react'\n\nexport const IS_REACT_VERSION_17_OR_ABOVE =\n  parseInt(React.version.split('.')[0], 10) >= 17\n\nexport const IS_IOS =\n  typeof navigator !== 'undefined' &&\n  typeof window !== 'undefined' &&\n  /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n  !window.MSStream\n\nexport const IS_APPLE =\n  typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent)\n\nexport const IS_ANDROID =\n  typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent)\n\nexport const IS_FIREFOX =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent)\n\nexport const IS_SAFARI =\n  typeof navigator !== 'undefined' &&\n  /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n\n// \"modern\" Edge was released at 79.x\nexport const IS_EDGE_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])(?:\\.)/i.test(navigator.userAgent)\n\nexport const IS_CHROME =\n  typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent)\n\n// Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\nexport const IS_CHROME_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])(?:\\.)/i.test(navigator.userAgent)\n\n// Firefox did not support `beforeInput` until `v87`.\nexport const IS_FIREFOX_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])(?:\\.)).*/i.test(\n    navigator.userAgent\n  )\n\n// qq browser\nexport const IS_QQBROWSER =\n  typeof navigator !== 'undefined' && /.*QQBrowser/.test(navigator.userAgent)\n\n// UC mobile browser\nexport const IS_UC_MOBILE =\n  typeof navigator !== 'undefined' && /.*UCBrowser/.test(navigator.userAgent)\n\n// Wechat browser\nexport const IS_WECHATBROWSER =\n  typeof navigator !== 'undefined' && /.*Wechat/.test(navigator.userAgent)\n\n// Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nexport const CAN_USE_DOM = !!(\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n)\n\n// COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\nexport const HAS_BEFORE_INPUT_SUPPORT =\n  !IS_CHROME_LEGACY &&\n  !IS_EDGE_LEGACY &&\n  // globalThis is undefined in older browsers\n  typeof globalThis !== 'undefined' &&\n  globalThis.InputEvent &&\n  // @ts-ignore The `getTargetRanges` property isn't recognized.\n  typeof globalThis.InputEvent.prototype.getTargetRanges === 'function'\n","import { useLayoutEffect, useEffect } from 'react'\nimport { CAN_USE_DOM } from '../utils/environment'\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\n\nexport const useIsomorphicLayoutEffect = CAN_USE_DOM\n  ? useLayoutEffect\n  : useEffect\n","import React, { useRef } from 'react'\nimport { Editor, Text, Path, Element, Node } from 'slate'\n\nimport { ReactEditor, useSlateStatic } from '..'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\n\n/**\n * Leaf content strings.\n */\n\nconst String = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  text: Text\n}) => {\n  const { isLast, leaf, parent, text } = props\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, text)\n  const parentPath = Path.parent(path)\n\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return <ZeroWidthString length={Node.string(parent).length} />\n  }\n\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (\n    leaf.text === '' &&\n    parent.children[parent.children.length - 1] === text &&\n    !editor.isInline(parent) &&\n    Editor.string(editor, parentPath) === ''\n  ) {\n    return <ZeroWidthString isLineBreak />\n  }\n\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return <ZeroWidthString />\n  }\n\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return <TextString isTrailing text={leaf.text} />\n  }\n\n  return <TextString text={leaf.text} />\n}\n\n/**\n * Leaf strings with text in them.\n */\nconst TextString = (props: { text: string; isTrailing?: boolean }) => {\n  const { text, isTrailing = false } = props\n\n  const ref = useRef<HTMLSpanElement>(null)\n\n  const getTextContent = () => {\n    return `${text ?? ''}${isTrailing ? '\\n' : ''}`\n  }\n\n  // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n\n  // useLayoutEffect: updating our span before browser paint\n  useIsomorphicLayoutEffect(() => {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    const textWithTrailing = getTextContent()\n\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing\n    }\n\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n  })\n\n  // Render text content immediately if it's the first-time render\n  // Ensure that text content is rendered on server-side rendering\n  if (!ref.current) {\n    return (\n      <span data-slate-string ref={ref}>\n        {getTextContent()}\n      </span>\n    )\n  }\n\n  // the span is intentionally same on every render in virtual DOM, actual rendering happens in the layout effect above\n  return <span data-slate-string ref={ref} />\n}\n\n/**\n * Leaf strings without text, render as zero-width strings.\n */\n\nconst ZeroWidthString = (props: { length?: number; isLineBreak?: boolean }) => {\n  const { length = 0, isLineBreak = false } = props\n  return (\n    <span\n      data-slate-zero-width={isLineBreak ? 'n' : 'z'}\n      data-slate-length={length}\n    >\n      {'\\uFEFF'}\n      {isLineBreak ? <br /> : null}\n    </span>\n  )\n}\n\nexport default String\n","import { Ancestor, Editor, Node, RangeRef } from 'slate'\nimport { Key } from './key'\nimport { TextInsertion } from '../components/android/diff-text'\n\n/**\n * Two weak maps that allow us rebuild a path given a node. They are populated\n * at render time such that after a render occurs we can always backtrack.\n */\n\nexport const NODE_TO_INDEX: WeakMap<Node, number> = new WeakMap()\nexport const NODE_TO_PARENT: WeakMap<Node, Ancestor> = new WeakMap()\n\n/**\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\n * are used to resolve DOM event-related logic into Slate actions.\n */\nexport const EDITOR_TO_WINDOW: WeakMap<Editor, Window> = new WeakMap()\nexport const EDITOR_TO_ELEMENT: WeakMap<Editor, HTMLElement> = new WeakMap()\nexport const EDITOR_TO_PLACEHOLDER: WeakMap<Editor, string> = new WeakMap()\nexport const ELEMENT_TO_NODE: WeakMap<HTMLElement, Node> = new WeakMap()\nexport const NODE_TO_ELEMENT: WeakMap<Node, HTMLElement> = new WeakMap()\nexport const NODE_TO_KEY: WeakMap<Node, Key> = new WeakMap()\nexport const EDITOR_TO_KEY_TO_ELEMENT: WeakMap<\n  Editor,\n  WeakMap<Key, HTMLElement>\n> = new WeakMap()\n\n/**\n * Weak maps for storing editor-related state.\n */\n\nexport const IS_READ_ONLY: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_FOCUSED: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_CLICKING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_COMPOSING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_ON_COMPOSITION_END: WeakMap<Editor, boolean> = new WeakMap()\n\nexport const EDITOR_TO_USER_SELECTION: WeakMap<Editor, RangeRef> = new WeakMap()\n\n/**\n * Weak maps for saving text on composition stage.\n */\n\nexport const EDITOR_ON_COMPOSITION_TEXT: WeakMap<\n  Editor,\n  TextInsertion[]\n> = new WeakMap()\n\n/**\n * Weak map for associating the context `onChange` context with the plugin.\n */\n\nexport const EDITOR_TO_ON_CHANGE = new WeakMap<Editor, () => void>()\n\nexport const NODE_TO_RESTORE_DOM = new WeakMap<Node, () => void>()\n\n/**\n * Symbols.\n */\n\nexport const PLACEHOLDER_SYMBOL = (Symbol('placeholder') as unknown) as string\n","import React, { useRef, useEffect } from 'react'\nimport { Element, Text } from 'slate'\nimport String from './string'\nimport { PLACEHOLDER_SYMBOL } from '../utils/weak-maps'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\n\n/**\n * Individual leaves in a text node with unique formatting.\n */\n\nconst Leaf = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: Text\n}) => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = (props: RenderLeafProps) => <DefaultLeaf {...props} />,\n  } = props\n\n  const placeholderRef = useRef<HTMLSpanElement | null>(null)\n\n  useEffect(() => {\n    const placeholderEl = placeholderRef?.current\n    const editorEl = document.querySelector<HTMLDivElement>(\n      '[data-slate-editor=\"true\"]'\n    )\n\n    if (!placeholderEl || !editorEl) {\n      return\n    }\n\n    editorEl.style.minHeight = `${placeholderEl.clientHeight}px`\n\n    return () => {\n      editorEl.style.minHeight = 'auto'\n    }\n  }, [placeholderRef, leaf])\n\n  let children = (\n    <String isLast={isLast} leaf={leaf} parent={parent} text={text} />\n  )\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    const placeholderProps: RenderPlaceholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n        },\n        contentEditable: false,\n        ref: placeholderRef,\n      },\n    }\n\n    children = (\n      <React.Fragment>\n        {renderPlaceholder(placeholderProps)}\n        {children}\n      </React.Fragment>\n    )\n  }\n\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  const attributes: {\n    'data-slate-leaf': true\n  } = {\n    'data-slate-leaf': true,\n  }\n\n  return renderLeaf({ attributes, children, leaf, text })\n}\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.renderPlaceholder === prev.renderPlaceholder &&\n    next.text === prev.text &&\n    Text.equals(next.leaf, prev.leaf) &&\n    next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL]\n  )\n})\n\nexport const DefaultLeaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props\n  return <span {...attributes}>{children}</span>\n}\n\nexport default MemoizedLeaf\n","import { Range } from 'slate'\nimport { PLACEHOLDER_SYMBOL } from './weak-maps'\n\nexport const shallowCompare = (obj1: {}, obj2: {}) =>\n  Object.keys(obj1).length === Object.keys(obj2).length &&\n  Object.keys(obj1).every(\n    key => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]\n  )\n\n/**\n * Check if a list of decorator ranges are equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */\n\nexport const isDecoratorRangeListEqual = (\n  list: Range[],\n  another: Range[]\n): boolean => {\n  if (list.length !== another.length) {\n    return false\n  }\n\n  for (let i = 0; i < list.length; i++) {\n    const range = list[i]\n    const other = another[i]\n\n    const { anchor: rangeAnchor, focus: rangeFocus, ...rangeOwnProps } = range\n    const { anchor: otherAnchor, focus: otherFocus, ...otherOwnProps } = other\n\n    if (\n      !Range.equals(range, other) ||\n      range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] ||\n      !shallowCompare(rangeOwnProps, otherOwnProps)\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { Node as SlateNode } from 'slate'\nimport { NODE_TO_RESTORE_DOM } from '../utils/weak-maps'\n\nexport function useContentKey(node: SlateNode) {\n  const contentKeyRef = useRef<number>(0)\n  const updateAnimationFrameRef = useRef<number | null>(null)\n\n  const [, setForceRerenderCounter] = useState(0)\n\n  useEffect(() => {\n    NODE_TO_RESTORE_DOM.set(node, () => {\n      // Update is already queued and node hasn't re-render yet\n      if (updateAnimationFrameRef.current) {\n        return\n      }\n\n      updateAnimationFrameRef.current = requestAnimationFrame(() => {\n        setForceRerenderCounter(state => state + 1)\n        updateAnimationFrameRef.current = null\n      })\n\n      contentKeyRef.current++\n    })\n\n    return () => {\n      NODE_TO_RESTORE_DOM.delete(node)\n    }\n  }, [node])\n\n  // Node was restored => clear scheduled update\n  if (updateAnimationFrameRef.current) {\n    cancelAnimationFrame(updateAnimationFrameRef.current)\n    updateAnimationFrameRef.current = null\n  }\n\n  return contentKeyRef.current\n}\n","import React, { useRef } from 'react'\nimport { Range, Element, Text as SlateText } from 'slate'\n\nimport Leaf from './leaf'\nimport { ReactEditor, useSlateStatic } from '..'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  EDITOR_TO_KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\nimport { useContentKey } from '../hooks/use-content-key'\nimport { IS_ANDROID } from '../utils/environment'\n\n/**\n * Text.\n */\n\nconst Text = (props: {\n  decorations: Range[]\n  isLast: boolean\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: SlateText\n}) => {\n  const {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text,\n  } = props\n  const editor = useSlateStatic()\n  const ref = useRef<HTMLSpanElement>(null)\n  const leaves = SlateText.decorations(text, decorations)\n  const key = ReactEditor.findKey(editor, text)\n  const children = []\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i]\n\n    children.push(\n      <Leaf\n        isLast={isLast && i === leaves.length - 1}\n        key={`${key.id}-${i}`}\n        renderPlaceholder={renderPlaceholder}\n        leaf={leaf}\n        text={text}\n        parent={parent}\n        renderLeaf={renderLeaf}\n      />\n    )\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    if (ref.current) {\n      KEY_TO_ELEMENT?.set(key, ref.current)\n      NODE_TO_ELEMENT.set(text, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, text)\n    } else {\n      KEY_TO_ELEMENT?.delete(key)\n      NODE_TO_ELEMENT.delete(text)\n    }\n  })\n\n  const contentKey = IS_ANDROID ? useContentKey(text) : undefined\n\n  return (\n    <span data-slate-node=\"text\" ref={ref} key={contentKey}>\n      {children}\n    </span>\n  )\n}\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text &&\n    isDecoratorRangeListEqual(next.decorations, prev.decorations)\n  )\n})\n\nexport default MemoizedText\n","import React, { Fragment, useRef } from 'react'\nimport getDirection from 'direction'\nimport { Editor, Node, Range, Element as SlateElement } from 'slate'\n\nimport Text from './text'\nimport useChildren from '../hooks/use-children'\nimport { ReactEditor, useSlateStatic, useReadOnly } from '..'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_PARENT,\n  NODE_TO_INDEX,\n  EDITOR_TO_KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from './editable'\nimport { useContentKey } from '../hooks/use-content-key'\nimport { IS_ANDROID } from '../utils/environment'\n\n/**\n * Element.\n */\n\nconst Element = (props: {\n  decorations: Range[]\n  element: SlateElement\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    element,\n    renderElement = (p: RenderElementProps) => <DefaultElement {...p} />,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const ref = useRef<HTMLElement>(null)\n  const editor = useSlateStatic()\n  const readOnly = useReadOnly()\n  const isInline = editor.isInline(element)\n  const key = ReactEditor.findKey(editor, element)\n  let children: React.ReactNode = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  })\n\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  const attributes: {\n    'data-slate-node': 'element'\n    'data-slate-void'?: true\n    'data-slate-inline'?: true\n    contentEditable?: false\n    dir?: 'rtl'\n    ref: any\n  } = {\n    'data-slate-node': 'element',\n    ref,\n  }\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true\n  }\n\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node.string(element)\n    const dir = getDirection(text)\n\n    if (dir === 'rtl') {\n      attributes.dir = dir\n    }\n  }\n\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false\n    }\n\n    const Tag = isInline ? 'span' : 'div'\n    const [[text]] = Node.texts(element)\n\n    children = (\n      <Tag\n        data-slate-spacer\n        style={{\n          height: '0',\n          color: 'transparent',\n          outline: 'none',\n          position: 'absolute',\n        }}\n      >\n        <Text\n          renderPlaceholder={renderPlaceholder}\n          decorations={[]}\n          isLast={false}\n          parent={element}\n          text={text}\n        />\n      </Tag>\n    )\n\n    NODE_TO_INDEX.set(text, 0)\n    NODE_TO_PARENT.set(text, element)\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    if (ref.current) {\n      KEY_TO_ELEMENT?.set(key, ref.current)\n      NODE_TO_ELEMENT.set(element, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, element)\n    } else {\n      KEY_TO_ELEMENT?.delete(key)\n      NODE_TO_ELEMENT.delete(element)\n    }\n  })\n\n  const content = renderElement({ attributes, children, element })\n\n  if (IS_ANDROID) {\n    const contentKey = useContentKey(element)\n    return <Fragment key={contentKey}>{content}</Fragment>\n  }\n\n  return content\n}\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return (\n    prev.element === next.element &&\n    prev.renderElement === next.renderElement &&\n    prev.renderLeaf === next.renderLeaf &&\n    isDecoratorRangeListEqual(prev.decorations, next.decorations) &&\n    (prev.selection === next.selection ||\n      (!!prev.selection &&\n        !!next.selection &&\n        Range.equals(prev.selection, next.selection)))\n  )\n})\n\n/**\n * The default element renderer.\n */\n\nexport const DefaultElement = (props: RenderElementProps) => {\n  const { attributes, children, element } = props\n  const editor = useSlateStatic()\n  const Tag = editor.isInline(element) ? 'span' : 'div'\n  return (\n    <Tag {...attributes} style={{ position: 'relative' }}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default MemoizedElement\n","import { createContext, useContext } from 'react'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { Editor } from 'slate'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const EditorContext = createContext<ReactEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlateStatic = (): Editor => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useSlateStatic\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\n\nexport const SelectedContext = createContext(false)\n\n/**\n * Get the current `selected` state of an element.\n */\n\nexport const useSelected = (): boolean => {\n  return useContext(SelectedContext)\n}\n","import React from 'react'\nimport { Editor, Range, Element, Ancestor, Descendant } from 'slate'\n\nimport ElementComponent from '../components/element'\nimport TextComponent from '../components/text'\nimport { ReactEditor } from '..'\nimport { useSlateStatic } from './use-slate-static'\nimport { NODE_TO_INDEX, NODE_TO_PARENT } from '../utils/weak-maps'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from '../components/editable'\nimport { SelectedContext } from './use-selected'\n\n/**\n * Children.\n */\n\nconst useChildren = (props: {\n  decorations: Range[]\n  node: Ancestor\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, node)\n  const children = []\n  const isLeafBlock =\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    Editor.hasInlines(editor, node)\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i)\n    const n = node.children[i] as Descendant\n    const key = ReactEditor.findKey(editor, n)\n    const range = Editor.range(editor, p)\n    const sel = selection && Range.intersection(range, selection)\n\n    const ds = decorations.reduce<Range[]>((acc, dec) => {\n      const intersection = Range.intersection(dec, range)\n      if (intersection) acc.push(intersection)\n      return acc\n    }, [])\n\n    if (Element.isElement(n)) {\n      children.push(\n        <SelectedContext.Provider key={`provider-${key.id}`} value={!!sel}>\n          <ElementComponent\n            decorations={ds}\n            element={n}\n            key={key.id}\n            renderElement={renderElement}\n            renderPlaceholder={renderPlaceholder}\n            renderLeaf={renderLeaf}\n            selection={sel}\n          />\n        </SelectedContext.Provider>\n      )\n    } else {\n      children.push(\n        <TextComponent\n          decorations={ds}\n          key={key.id}\n          isLast={isLeafBlock && i === node.children.length - 1}\n          parent={node}\n          renderPlaceholder={renderPlaceholder}\n          renderLeaf={renderLeaf}\n          text={n}\n        />\n      )\n    }\n\n    NODE_TO_INDEX.set(n, i)\n    NODE_TO_PARENT.set(n, node)\n  }\n\n  return children\n}\n\nexport default useChildren\n","import { isKeyHotkey } from 'is-hotkey'\nimport { IS_APPLE } from './environment'\n\n/**\n * Hotkey mappings for each platform.\n */\n\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  insertSoftBreak: 'shift+enter',\n  splitBlock: 'enter',\n  undo: 'mod+z',\n}\n\nconst APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n}\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n}\n\n/**\n * Create a platform-aware hotkey checker.\n */\n\nconst create = (key: string) => {\n  const generic = HOTKEYS[key]\n  const apple = APPLE_HOTKEYS[key]\n  const windows = WINDOWS_HOTKEYS[key]\n  const isGeneric = generic && isKeyHotkey(generic)\n  const isApple = apple && isKeyHotkey(apple)\n  const isWindows = windows && isKeyHotkey(windows)\n\n  return (event: KeyboardEvent) => {\n    if (isGeneric && isGeneric(event)) return true\n    if (IS_APPLE && isApple && isApple(event)) return true\n    if (!IS_APPLE && isWindows && isWindows(event)) return true\n    return false\n  }\n}\n\n/**\n * Hotkeys.\n */\n\nexport default {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSoftBreak: create('insertSoftBreak'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo'),\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\n\nexport const ReadOnlyContext = createContext(false)\n\n/**\n * Get the current `readOnly` state of the editor.\n */\n\nexport const useReadOnly = (): boolean => {\n  return useContext(ReadOnlyContext)\n}\n","import { createContext, useContext } from 'react'\nimport { Editor } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object, in a way that re-renders the\n * context whenever changes occur.\n */\n\nexport const SlateContext = createContext<[ReactEditor] | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlate = (): Editor => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  const [editor] = context\n  return editor\n}\n","import { createContext, useContext } from 'react'\nimport { Range, NodeEntry } from 'slate'\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\n\nexport const DecorateContext = createContext<(entry: NodeEntry) => Range[]>(\n  () => []\n)\n\n/**\n * Get the current `decorate` prop of the editable.\n */\n\nexport const useDecorate = (): ((entry: NodeEntry) => Range[]) => {\n  return useContext(DecorateContext)\n}\n","/**\n * Types.\n */\n\n// COMPAT: This is required to prevent TypeScript aliases from doing some very\n// weird things for Slate's types with the same name as globals. (2019/11/27)\n// https://github.com/microsoft/TypeScript/issues/35002\nimport DOMNode = globalThis.Node\nimport DOMComment = globalThis.Comment\nimport DOMElement = globalThis.Element\nimport DOMText = globalThis.Text\nimport DOMRange = globalThis.Range\nimport DOMSelection = globalThis.Selection\nimport DOMStaticRange = globalThis.StaticRange\n\nexport {\n  DOMNode,\n  DOMComment,\n  DOMElement,\n  DOMText,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n}\n\ndeclare global {\n  interface Window {\n    Selection: typeof Selection['constructor']\n    DataTransfer: typeof DataTransfer['constructor']\n    Node: typeof Node['constructor']\n  }\n}\n\nexport type DOMPoint = [Node, number]\n\n/**\n * Returns the host window of a DOM node\n */\n\nexport const getDefaultView = (value: any): Window | null => {\n  return (\n    (value && value.ownerDocument && value.ownerDocument.defaultView) || null\n  )\n}\n\n/**\n * Check if a DOM node is a comment node.\n */\n\nexport const isDOMComment = (value: any): value is DOMComment => {\n  return isDOMNode(value) && value.nodeType === 8\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMElement = (value: any): value is DOMElement => {\n  return isDOMNode(value) && value.nodeType === 1\n}\n\n/**\n * Check if a value is a DOM node.\n */\n\nexport const isDOMNode = (value: any): value is DOMNode => {\n  const window = getDefaultView(value)\n  return !!window && value instanceof window.Node\n}\n\n/**\n * Check if a value is a DOM selection.\n */\n\nexport const isDOMSelection = (value: any): value is DOMSelection => {\n  const window = value && value.anchorNode && getDefaultView(value.anchorNode)\n  return !!window && value instanceof window.Selection\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMText = (value: any): value is DOMText => {\n  return isDOMNode(value) && value.nodeType === 3\n}\n\n/**\n * Checks whether a paste event is a plaintext-only event.\n */\n\nexport const isPlainTextOnlyPaste = (event: ClipboardEvent) => {\n  return (\n    event.clipboardData &&\n    event.clipboardData.getData('text/plain') !== '' &&\n    event.clipboardData.types.length === 1\n  )\n}\n\n/**\n * Normalize a DOM point so that it always refers to a text node.\n */\n\nexport const normalizeDOMPoint = (domPoint: DOMPoint): DOMPoint => {\n  let [node, offset] = domPoint\n\n  // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n  if (isDOMElement(node) && node.childNodes.length) {\n    let isLast = offset === node.childNodes.length\n    let index = isLast ? offset - 1 : offset\n    ;[node, index] = getEditableChildAndIndex(\n      node,\n      index,\n      isLast ? 'backward' : 'forward'\n    )\n    // If the editable child found is in front of input offset, we instead seek to its end\n    isLast = index < offset\n\n    // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n    while (isDOMElement(node) && node.childNodes.length) {\n      const i = isLast ? node.childNodes.length - 1 : 0\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward')\n    }\n\n    // Determine the new offset inside the text node.\n    offset = isLast && node.textContent != null ? node.textContent.length : 0\n  }\n\n  // Return the node and offset.\n  return [node, offset]\n}\n\n/**\n * Determines wether the active element is nested within a shadowRoot\n */\n\nexport const hasShadowRoot = () => {\n  return !!(\n    window.document.activeElement && window.document.activeElement.shadowRoot\n  )\n}\n\n/**\n * Get the nearest editable child and index at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChildAndIndex = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): [DOMNode, number] => {\n  const { childNodes } = parent\n  let child = childNodes[index]\n  let i = index\n  let triedForward = false\n  let triedBackward = false\n\n  // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n  while (\n    isDOMComment(child) ||\n    (isDOMElement(child) && child.childNodes.length === 0) ||\n    (isDOMElement(child) && child.getAttribute('contenteditable') === 'false')\n  ) {\n    if (triedForward && triedBackward) {\n      break\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true\n      i = index - 1\n      direction = 'backward'\n      continue\n    }\n\n    if (i < 0) {\n      triedBackward = true\n      i = index + 1\n      direction = 'forward'\n      continue\n    }\n\n    child = childNodes[i]\n    index = i\n    i += direction === 'forward' ? 1 : -1\n  }\n\n  return [child, index]\n}\n\n/**\n * Get the nearest editable child at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChild = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): DOMNode => {\n  const [child] = getEditableChildAndIndex(parent, index, direction)\n  return child\n}\n\n/**\n * Get a plaintext representation of the content of a node, accounting for block\n * elements which get a newline appended.\n *\n * The domNode must be attached to the DOM.\n */\n\nexport const getPlainText = (domNode: DOMNode) => {\n  let text = ''\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue\n  }\n\n  if (isDOMElement(domNode)) {\n    for (const childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode)\n    }\n\n    const display = getComputedStyle(domNode).getPropertyValue('display')\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n'\n    }\n  }\n\n  return text\n}\n\n/**\n * Get x-slate-fragment attribute from data-slate-fragment\n */\nconst catchSlateFragment = /data-slate-fragment=\"(.+?)\"/m\nexport const getSlateFragmentAttribute = (\n  dataTransfer: DataTransfer\n): string | void => {\n  const htmlData = dataTransfer.getData('text/html')\n  const [, fragment] = htmlData.match(catchSlateFragment) || []\n  return fragment\n}\n\n/**\n * Get the x-slate-fragment attribute that exist in text/html data\n * and append it to the DataTransfer object\n */\nexport const getClipboardData = (dataTransfer: DataTransfer): DataTransfer => {\n  if (!dataTransfer.getData('application/x-slate-fragment')) {\n    const fragment = getSlateFragmentAttribute(dataTransfer)\n    if (fragment) {\n      const clipboardData = new DataTransfer()\n      dataTransfer.types.forEach(type => {\n        clipboardData.setData(type, dataTransfer.getData(type))\n      })\n      clipboardData.setData('application/x-slate-fragment', fragment)\n      return clipboardData\n    }\n  }\n  return dataTransfer\n}\n","import React, { useEffect, useRef, useMemo, useCallback, useState } from 'react'\nimport {\n  Editor,\n  Element,\n  NodeEntry,\n  Node,\n  Range,\n  Text,\n  Transforms,\n  Path,\n  RangeRef,\n} from 'slate'\nimport getDirection from 'direction'\nimport debounce from 'lodash/debounce'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport useChildren from '../hooks/use-children'\nimport Hotkeys from '../utils/hotkeys'\nimport {\n  HAS_BEFORE_INPUT_SUPPORT,\n  IS_IOS,\n  IS_CHROME,\n  IS_FIREFOX,\n  IS_FIREFOX_LEGACY,\n  IS_QQBROWSER,\n  IS_SAFARI,\n  IS_UC_MOBILE,\n  IS_WECHATBROWSER,\n  CAN_USE_DOM,\n} from '../utils/environment'\nimport { ReactEditor } from '..'\nimport { ReadOnlyContext } from '../hooks/use-read-only'\nimport { useSlate } from '../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../hooks/use-decorate'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMRange,\n  getDefaultView,\n  isDOMElement,\n  isDOMNode,\n  isPlainTextOnlyPaste,\n  DOMText,\n} from '../utils/dom'\n\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  IS_FOCUSED,\n  PLACEHOLDER_SYMBOL,\n  EDITOR_TO_WINDOW,\n  EDITOR_TO_USER_SELECTION,\n  IS_COMPOSING,\n} from '../utils/weak-maps'\nimport { TRIPLE_CLICK } from '../utils/constants'\n\ntype DeferredOperation = () => void\n\nconst Children = (props: Parameters<typeof useChildren>[0]) => (\n  <React.Fragment>{useChildren(props)}</React.Fragment>\n)\n\n/**\n * `RenderElementProps` are passed to the `renderElement` handler.\n */\n\nexport interface RenderElementProps {\n  children: any\n  element: Element\n  attributes: {\n    'data-slate-node': 'element'\n    'data-slate-inline'?: true\n    'data-slate-void'?: true\n    dir?: 'rtl'\n    ref: any\n  }\n}\n\n/**\n * `RenderLeafProps` are passed to the `renderLeaf` handler.\n */\n\nexport interface RenderLeafProps {\n  children: any\n  leaf: Text\n  text: Text\n  attributes: {\n    'data-slate-leaf': true\n  }\n}\n\n/**\n * `EditableProps` are passed to the `<Editable>` component.\n */\n\nexport type EditableProps = {\n  decorate?: (entry: NodeEntry) => Range[]\n  onDOMBeforeInput?: (event: InputEvent) => void\n  placeholder?: string\n  readOnly?: boolean\n  role?: string\n  style?: React.CSSProperties\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  renderPlaceholder?: (props: RenderPlaceholderProps) => JSX.Element\n  scrollSelectionIntoView?: (editor: ReactEditor, domRange: DOMRange) => void\n  as?: React.ElementType\n} & React.TextareaHTMLAttributes<HTMLDivElement>\n\n/**\n * Editable.\n */\n\nexport const Editable = (props: EditableProps) => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    scrollSelectionIntoView = defaultScrollSelectionIntoView,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  // Rerender editor when composition status changed\n  const [isComposing, setIsComposing] = useState(false)\n  const ref = useRef<HTMLDivElement>(null)\n  const deferredOperations = useRef<DeferredOperation[]>([])\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      hasInsertPrefixInCompositon: false,\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n\n    // Make sure the DOM selection state is in sync.\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (\n      ReactEditor.isComposing(editor) ||\n      !domSelection ||\n      !ReactEditor.isFocused(editor)\n    ) {\n      return\n    }\n\n    const hasDomSelection = domSelection.type !== 'None'\n\n    // If the DOM selection is properly unset, we're done.\n    if (!selection && !hasDomSelection) {\n      return\n    }\n\n    // verify that the dom selection is in the editor\n    const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n    let hasDomSelectionInEditor = false\n    if (\n      editorElement.contains(domSelection.anchorNode) &&\n      editorElement.contains(domSelection.focusNode)\n    ) {\n      hasDomSelectionInEditor = true\n    }\n\n    // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n    if (hasDomSelection && hasDomSelectionInEditor && selection) {\n      const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: true,\n\n        // domSelection is not necessarily a valid Slate range\n        // (e.g. when clicking on contentEditable:false element)\n        suppressThrow: true,\n      })\n      if (slateRange && Range.equals(slateRange, selection)) {\n        return\n      }\n    }\n\n    // when <Editable/> is being controlled through external value\n    // then its children might just change - DOM responds to it on its own\n    // but Slate's value is not being updated through any operation\n    // and thus it doesn't transform selection on its own\n    if (selection && !ReactEditor.hasRange(editor, selection)) {\n      editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: false,\n      })\n      return\n    }\n\n    // Otherwise the DOM selection is out of sync, so update it.\n    state.isUpdatingSelection = true\n\n    const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n    if (newDomRange) {\n      if (Range.isBackward(selection!)) {\n        domSelection.setBaseAndExtent(\n          newDomRange.endContainer,\n          newDomRange.endOffset,\n          newDomRange.startContainer,\n          newDomRange.startOffset\n        )\n      } else {\n        domSelection.setBaseAndExtent(\n          newDomRange.startContainer,\n          newDomRange.startOffset,\n          newDomRange.endContainer,\n          newDomRange.endOffset\n        )\n      }\n      scrollSelectionIntoView(editor, newDomRange)\n    } else {\n      domSelection.removeAllRanges()\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        const el = ReactEditor.toDOMNode(editor, editor)\n        el.focus()\n      }\n\n      state.isUpdatingSelection = false\n    })\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      if (\n        !ReactEditor.isComposing(editor) &&\n        !state.isUpdatingSelection &&\n        !state.isDraggingInternally\n      ) {\n        const root = ReactEditor.findDocumentOrShadowRoot(editor)\n        const { activeElement } = root\n        const el = ReactEditor.toDOMNode(editor, editor)\n        const domSelection = root.getSelection()\n\n        if (activeElement === el) {\n          state.latestElement = activeElement\n          IS_FOCUSED.set(editor, true)\n        } else {\n          IS_FOCUSED.delete(editor)\n        }\n\n        if (!domSelection) {\n          return Transforms.deselect(editor)\n        }\n\n        const { anchorNode, focusNode } = domSelection\n\n        const anchorNodeSelectable =\n          hasEditableTarget(editor, anchorNode) ||\n          isTargetInsideNonReadonlyVoid(editor, anchorNode)\n\n        const focusNodeSelectable =\n          hasEditableTarget(editor, focusNode) ||\n          isTargetInsideNonReadonlyVoid(editor, focusNode)\n\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          const range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n            suppressThrow: false,\n          })\n          Transforms.select(editor, range)\n        }\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  const scheduleOnDOMSelectionChange = useMemo(\n    () => debounce(onDOMSelectionChange, 0),\n    [onDOMSelectionChange]\n  )\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n        // triggering a `beforeinput` expecting the change to be applied to the immediately before\n        // set selection.\n        scheduleOnDOMSelectionChange.flush()\n        onDOMSelectionChange.flush()\n\n        const { selection } = editor\n        const { inputType: type } = event\n        const data = (event as any).dataTransfer || event.data || undefined\n\n        // These two types occur while a user is composing text and can't be\n        // cancelled. Let them through and wait for the composition to end.\n        if (\n          type === 'insertCompositionText' ||\n          type === 'deleteCompositionText'\n        ) {\n          return\n        }\n\n        let native = false\n        if (\n          type === 'insertText' &&\n          selection &&\n          Range.isCollapsed(selection) &&\n          // Only use native character insertion for single characters a-z or space for now.\n          // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n          // causes duplicate inserts.\n          event.data &&\n          event.data.length === 1 &&\n          /[a-z ]/i.test(event.data) &&\n          // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n          // When there is an inline element, e.g. a link, and you select\n          // right after it (the start of the next node).\n          selection.anchor.offset !== 0\n        ) {\n          native = true\n\n          // Skip native if there are marks, as\n          // `insertText` will insert a node, not just text.\n          if (editor.marks) {\n            native = false\n          }\n\n          // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n          // Therefore we don't allow native events to insert text at the end of anchor nodes.\n          const { anchor } = selection\n\n          const [node, offset] = ReactEditor.toDOMPoint(editor, anchor)\n          const anchorNode = node.parentElement?.closest('a')\n\n          if (anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n            const { document } = ReactEditor.getWindow(editor)\n\n            // Find the last text node inside the anchor.\n            const lastText = document\n              .createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT)\n              .lastChild() as DOMText | null\n\n            if (lastText === node && lastText.textContent?.length === offset) {\n              native = false\n            }\n          }\n        }\n\n        // COMPAT: For the deleting forward/backward input types we don't want\n        // to change the selection because it is the range that will be deleted,\n        // and those commands determine that for themselves.\n        if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n          const [targetRange] = (event as any).getTargetRanges()\n\n          if (targetRange) {\n            const range = ReactEditor.toSlateRange(editor, targetRange, {\n              exactMatch: false,\n              suppressThrow: false,\n            })\n\n            if (!selection || !Range.equals(selection, range)) {\n              native = false\n\n              const selectionRef =\n                editor.selection && Editor.rangeRef(editor, editor.selection)\n\n              Transforms.select(editor, range)\n\n              if (selectionRef) {\n                EDITOR_TO_USER_SELECTION.set(editor, selectionRef)\n              }\n            }\n          }\n        }\n\n        if (!native) {\n          event.preventDefault()\n        }\n\n        // COMPAT: If the selection is expanded, even if the command seems like\n        // a delete forward/backward command it should delete the selection.\n        if (\n          selection &&\n          Range.isExpanded(selection) &&\n          type.startsWith('delete')\n        ) {\n          const direction = type.endsWith('Backward') ? 'backward' : 'forward'\n          Editor.deleteFragment(editor, { direction })\n          return\n        }\n\n        switch (type) {\n          case 'deleteByComposition':\n          case 'deleteByCut':\n          case 'deleteByDrag': {\n            Editor.deleteFragment(editor)\n            break\n          }\n\n          case 'deleteContent':\n          case 'deleteContentForward': {\n            Editor.deleteForward(editor)\n            break\n          }\n\n          case 'deleteContentBackward': {\n            Editor.deleteBackward(editor)\n            break\n          }\n\n          case 'deleteEntireSoftLine': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineForward': {\n            Editor.deleteForward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineForward': {\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteWordBackward': {\n            Editor.deleteBackward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'deleteWordForward': {\n            Editor.deleteForward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'insertLineBreak':\n            Editor.insertSoftBreak(editor)\n            break\n\n          case 'insertParagraph': {\n            Editor.insertBreak(editor)\n            break\n          }\n\n          case 'insertFromComposition':\n          case 'insertFromDrop':\n          case 'insertFromPaste':\n          case 'insertFromYank':\n          case 'insertReplacementText':\n          case 'insertText': {\n            const { selection } = editor\n            if (selection) {\n              if (Range.isExpanded(selection)) {\n                Editor.deleteFragment(editor)\n              }\n            }\n\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              if (ReactEditor.isComposing(editor)) {\n                setIsComposing(false)\n                IS_COMPOSING.set(editor, false)\n              }\n            }\n\n            // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n            if (data?.constructor.name === 'DataTransfer') {\n              ReactEditor.insertData(editor, data)\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (native) {\n                deferredOperations.current.push(() =>\n                  Editor.insertText(editor, data)\n                )\n              } else {\n                Editor.insertText(editor, data)\n              }\n            }\n\n            break\n          }\n        }\n\n        // Restore the actual user section if nothing manually set it.\n        const toRestore = EDITOR_TO_USER_SELECTION.get(editor)?.unref()\n        EDITOR_TO_USER_SELECTION.delete(editor)\n\n        if (\n          toRestore &&\n          (!editor.selection || !Range.equals(editor.selection, toRestore))\n        ) {\n          Transforms.select(editor, toRestore)\n        }\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput)\n    }\n\n    return () => {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput)\n      }\n    }\n  }, [onDOMBeforeInput])\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener(\n      'selectionchange',\n      scheduleOnDOMSelectionChange\n    )\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        scheduleOnDOMSelectionChange\n      )\n    }\n  }, [scheduleOnDOMSelectionChange])\n\n  const decorations = [...Node.nodes(editor)].flatMap(([n, p]) =>\n    decorate([n, p])\n  )\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === '' &&\n    !isComposing\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n          // have to use hacks to make these replacement-based features work.\n          // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n          // mismatch warning app moves to browser. Pass-through consumer props when\n          // not CAN_USE_DOM (SSR) and default to falsy value\n          spellCheck={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.spellCheck\n              : false\n          }\n          autoCorrect={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.autoCorrect\n              : 'false'\n          }\n          autoCapitalize={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.autoCapitalize\n              : 'false'\n          }\n          data-slate-editor\n          data-slate-node=\"value\"\n          // explicitly set this\n          contentEditable={!readOnly}\n          // in some cases, a decoration needs access to the range / selection to decorate a text node,\n          // then you will select the whole text node when you select part the of text\n          // this magic zIndex=\"-1\" will fix it\n          zindex={-1}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onBeforeInput={useCallback(\n            (event: React.FormEvent<HTMLDivElement>) => {\n              // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n              // fall back to React's leaky polyfill instead just for it. It\n              // only works for the `insertText` input type.\n              if (\n                !HAS_BEFORE_INPUT_SUPPORT &&\n                !readOnly &&\n                !isEventHandled(event, attributes.onBeforeInput) &&\n                hasEditableTarget(editor, event.target)\n              ) {\n                event.preventDefault()\n                if (!ReactEditor.isComposing(editor)) {\n                  const text = (event as any).data as string\n                  Editor.insertText(editor, text)\n                }\n              }\n            },\n            [readOnly]\n          )}\n          onInput={useCallback((event: React.SyntheticEvent) => {\n            // Flush native operations, as native events will have propogated\n            // and we can correctly compare DOM text values in components\n            // to stop rendering, so that browser functions like autocorrect\n            // and spellcheck work as expected.\n            for (const op of deferredOperations.current) {\n              op()\n            }\n            deferredOperations.current = []\n          }, [])}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              // COMPAT: Safari doesn't always remove the selection even if the content-\n              // editable element no longer has focus. Refer to:\n              // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n              if (IS_SAFARI) {\n                const domSelection = root.getSelection()\n                domSelection?.removeAllRanges()\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onClick={useCallback(\n            (event: React.MouseEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onClick) &&\n                isDOMNode(event.target)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n\n                // At this time, the Slate document may be arbitrarily different,\n                // because onClick handlers can change the document before we get here.\n                // Therefore we must check that this path actually exists,\n                // and that it still refers to the same node.\n                if (\n                  !Editor.hasPath(editor, path) ||\n                  Node.get(editor, path) !== node\n                ) {\n                  return\n                }\n\n                if (event.detail === TRIPLE_CLICK && path.length >= 1) {\n                  let blockPath = path\n                  if (!Editor.isBlock(editor, node)) {\n                    const block = Editor.above(editor, {\n                      match: n => Editor.isBlock(editor, n),\n                      at: path,\n                    })\n\n                    blockPath = block?.[1] ?? path.slice(0, 1)\n                  }\n\n                  const range = Editor.range(editor, blockPath)\n                  Transforms.select(editor, range)\n                  return\n                }\n\n                if (readOnly) {\n                  return\n                }\n\n                const start = Editor.start(editor, path)\n                const end = Editor.end(editor, path)\n                const startVoid = Editor.void(editor, { at: start })\n                const endVoid = Editor.void(editor, { at: end })\n\n                if (\n                  startVoid &&\n                  endVoid &&\n                  Path.equals(startVoid[1], endVoid[1])\n                ) {\n                  const range = Editor.range(editor, start)\n                  Transforms.select(editor, range)\n                }\n              }\n            },\n            [readOnly, attributes.onClick]\n          )}\n          onCompositionEnd={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionEnd)\n              ) {\n                if (ReactEditor.isComposing(editor)) {\n                  setIsComposing(false)\n                  IS_COMPOSING.set(editor, false)\n                }\n\n                // COMPAT: In Chrome, `beforeinput` events for compositions\n                // aren't correct and never fire the \"insertFromComposition\"\n                // type that we need. So instead, insert whenever a composition\n                // ends since it will already have been committed to the DOM.\n                if (\n                  !IS_SAFARI &&\n                  !IS_FIREFOX_LEGACY &&\n                  !IS_IOS &&\n                  !IS_QQBROWSER &&\n                  !IS_WECHATBROWSER &&\n                  !IS_UC_MOBILE &&\n                  event.data\n                ) {\n                  Editor.insertText(editor, event.data)\n                }\n\n                if (editor.selection && Range.isCollapsed(editor.selection)) {\n                  const leafPath = editor.selection.anchor.path\n                  const currentTextNode = Node.leaf(editor, leafPath)\n                  if (state.hasInsertPrefixInCompositon) {\n                    state.hasInsertPrefixInCompositon = false\n                    Editor.withoutNormalizing(editor, () => {\n                      // remove Unicode BOM prefix added in `onCompositionStart`\n                      const text = currentTextNode.text.replace(/^\\uFEFF/, '')\n                      Transforms.delete(editor, {\n                        distance: currentTextNode.text.length,\n                        reverse: true,\n                      })\n                      Editor.insertText(editor, text)\n                    })\n                  }\n                }\n              }\n            },\n            [attributes.onCompositionEnd]\n          )}\n          onCompositionUpdate={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionUpdate)\n              ) {\n                if (!ReactEditor.isComposing(editor)) {\n                  setIsComposing(true)\n                  IS_COMPOSING.set(editor, true)\n                }\n              }\n            },\n            [attributes.onCompositionUpdate]\n          )}\n          onCompositionStart={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionStart)\n              ) {\n                const { selection, marks } = editor\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                    return\n                  }\n                  const inline = Editor.above(editor, {\n                    match: n => Editor.isInline(editor, n),\n                    mode: 'highest',\n                  })\n                  if (inline) {\n                    const [, inlinePath] = inline\n                    if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n                      const point = Editor.after(editor, inlinePath)!\n                      Transforms.setSelection(editor, {\n                        anchor: point,\n                        focus: point,\n                      })\n                    }\n                  }\n                  // insert new node in advance to ensure composition text will insert\n                  // along with final input text\n                  // add Unicode BOM prefix to avoid normalize removing this node\n                  if (marks) {\n                    state.hasInsertPrefixInCompositon = true\n                    Transforms.insertNodes(\n                      editor,\n                      {\n                        text: '\\uFEFF',\n                        ...marks,\n                      },\n                      {\n                        select: true,\n                      }\n                    )\n                  }\n                }\n              }\n            },\n            [attributes.onCompositionStart]\n          )}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData, 'copy')\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData, 'cut')\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onDragOver={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragOver)\n              ) {\n                // Only when the target is void, call `preventDefault` to signal\n                // that drops are allowed. Editable content is droppable by\n                // default, and calling `preventDefault` hides the cursor.\n                const node = ReactEditor.toSlateNode(editor, event.target)\n\n                if (Editor.isVoid(editor, node)) {\n                  event.preventDefault()\n                }\n              }\n            },\n            [attributes.onDragOver]\n          )}\n          onDragStart={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragStart)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n                const voidMatch =\n                  Editor.isVoid(editor, node) ||\n                  Editor.void(editor, { at: path, voids: true })\n\n                // If starting a drag on a void node, make sure it is selected\n                // so that it shows up in the selection's fragment.\n                if (voidMatch) {\n                  const range = Editor.range(editor, path)\n                  Transforms.select(editor, range)\n                }\n\n                state.isDraggingInternally = true\n\n                ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag')\n              }\n            },\n            [readOnly, attributes.onDragStart]\n          )}\n          onDrop={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDrop)\n              ) {\n                event.preventDefault()\n\n                // Keep a reference to the dragged range before updating selection\n                const draggedRange = editor.selection\n\n                // Find the range where the drop happened\n                const range = ReactEditor.findEventRange(editor, event)\n                const data = event.dataTransfer\n\n                Transforms.select(editor, range)\n\n                if (state.isDraggingInternally) {\n                  if (\n                    draggedRange &&\n                    !Range.equals(draggedRange, range) &&\n                    !Editor.void(editor, { at: range, voids: true })\n                  ) {\n                    Transforms.delete(editor, {\n                      at: draggedRange,\n                    })\n                  }\n                }\n\n                ReactEditor.insertData(editor, data)\n\n                // When dragging from another source into the editor, it's possible\n                // that the current editor does not have focus.\n                if (!ReactEditor.isFocused(editor)) {\n                  ReactEditor.focus(editor)\n                }\n              }\n\n              state.isDraggingInternally = false\n            },\n            [readOnly, attributes.onDrop]\n          )}\n          onDragEnd={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                state.isDraggingInternally &&\n                attributes.onDragEnd &&\n                hasTarget(editor, event.target)\n              ) {\n                attributes.onDragEnd(event)\n              }\n\n              // When dropping on a different droppable element than the current editor,\n              // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n              // Note: `onDragEnd` is only called when `onDrop` is not called\n              state.isDraggingInternally = false\n            },\n            [readOnly, attributes.onDragEnd]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const el = ReactEditor.toDOMNode(editor, editor)\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                // COMPAT: If the editor has nested editable elements, the focus\n                // can go to them. In Firefox, this must be prevented because it\n                // results in issues with keyboard navigation. (2017/03/30)\n                if (IS_FIREFOX && event.target !== el) {\n                  el.focus()\n                  return\n                }\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onKeyDown={useCallback(\n            (event: React.KeyboardEvent<HTMLDivElement>) => {\n              if (!readOnly && hasEditableTarget(editor, event.target)) {\n                const { nativeEvent } = event\n\n                // COMPAT: The composition end event isn't fired reliably in all browsers,\n                // so we sometimes might end up stuck in a composition state even though we\n                // aren't composing any more.\n                if (\n                  ReactEditor.isComposing(editor) &&\n                  nativeEvent.isComposing === false\n                ) {\n                  IS_COMPOSING.set(editor, false)\n                  setIsComposing(false)\n                }\n\n                if (\n                  isEventHandled(event, attributes.onKeyDown) ||\n                  ReactEditor.isComposing(editor)\n                ) {\n                  return\n                }\n\n                const { selection } = editor\n                const element =\n                  editor.children[\n                    selection !== null ? selection.focus.path[0] : 0\n                  ]\n                const isRTL = getDirection(Node.string(element)) === 'rtl'\n\n                // COMPAT: Since we prevent the default behavior on\n                // `beforeinput` events, the browser doesn't think there's ever\n                // any history stack to undo or redo, so we have to manage these\n                // hotkeys ourselves. (2019/11/06)\n                if (Hotkeys.isRedo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.redo === 'function') {\n                    maybeHistoryEditor.redo()\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isUndo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.undo === 'function') {\n                    maybeHistoryEditor.undo()\n                  }\n\n                  return\n                }\n\n                // COMPAT: Certain browsers don't handle the selection updates\n                // properly. In Chrome, the selection isn't properly extended.\n                // And in Firefox, the selection isn't properly collapsed.\n                // (2017/10/17)\n                if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', reverse: true })\n                  return\n                }\n\n                if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line' })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, {\n                    unit: 'line',\n                    edge: 'focus',\n                    reverse: true,\n                  })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', edge: 'focus' })\n                  return\n                }\n\n                // COMPAT: If a void node is selected, or a zero-width text node\n                // adjacent to an inline is selected, we need to handle these\n                // hotkeys manually because browsers won't be able to skip over\n                // the void node with the zero-width space not being an empty\n                // string.\n                if (Hotkeys.isMoveBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: !isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'start' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'end' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: !isRTL })\n                  return\n                }\n\n                if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: isRTL })\n                  return\n                }\n\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to guessing at the input intention for hotkeys.\n                // COMPAT: In iOS, some of these hotkeys are handled in the\n                if (!HAS_BEFORE_INPUT_SUPPORT) {\n                  // We don't have a core behavior for these, but they change the\n                  // DOM if we don't prevent them, so we have to.\n                  if (\n                    Hotkeys.isBold(nativeEvent) ||\n                    Hotkeys.isItalic(nativeEvent) ||\n                    Hotkeys.isTransposeCharacter(nativeEvent)\n                  ) {\n                    event.preventDefault()\n                    return\n                  }\n\n                  if (Hotkeys.isSoftBreak(nativeEvent)) {\n                    event.preventDefault()\n                    Editor.insertSoftBreak(editor)\n                    return\n                  }\n\n                  if (Hotkeys.isSplitBlock(nativeEvent)) {\n                    event.preventDefault()\n                    Editor.insertBreak(editor)\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n                } else {\n                  if (IS_CHROME || IS_SAFARI) {\n                    // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                    // an event when deleting backwards in a selected void inline node\n                    if (\n                      selection &&\n                      (Hotkeys.isDeleteBackward(nativeEvent) ||\n                        Hotkeys.isDeleteForward(nativeEvent)) &&\n                      Range.isCollapsed(selection)\n                    ) {\n                      const currentNode = Node.parent(\n                        editor,\n                        selection.anchor.path\n                      )\n\n                      if (\n                        Element.isElement(currentNode) &&\n                        Editor.isVoid(editor, currentNode) &&\n                        Editor.isInline(editor, currentNode)\n                      ) {\n                        event.preventDefault()\n                        Editor.deleteBackward(editor, { unit: 'block' })\n\n                        return\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onKeyDown]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste)\n              ) {\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to React's `onPaste` here instead.\n                // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                if (\n                  !HAS_BEFORE_INPUT_SUPPORT ||\n                  isPlainTextOnlyPaste(event.nativeEvent)\n                ) {\n                  event.preventDefault()\n                  ReactEditor.insertData(editor, event.clipboardData)\n                }\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          <Children\n            decorations={decorations}\n            node={editor}\n            renderElement={renderElement}\n            renderPlaceholder={renderPlaceholder}\n            renderLeaf={renderLeaf}\n            selection={editor.selection}\n          />\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n\n/**\n * The props that get passed to renderPlaceholder\n */\nexport type RenderPlaceholderProps = {\n  children: any\n  attributes: {\n    'data-slate-placeholder': boolean\n    dir?: 'rtl'\n    contentEditable: boolean\n    ref: React.RefObject<any>\n    style: React.CSSProperties\n  }\n}\n\n/**\n * The default placeholder element\n */\n\nexport const DefaultPlaceholder = ({\n  attributes,\n  children,\n}: RenderPlaceholderProps) => <span {...attributes}>{children}</span>\n\n/**\n * A default memoized decorate function.\n */\n\nexport const defaultDecorate: (entry: NodeEntry) => Range[] = () => []\n\n/**\n * A default implement to scroll dom range into view.\n */\n\nconst defaultScrollSelectionIntoView = (\n  editor: ReactEditor,\n  domRange: DOMRange\n) => {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (\n    !editor.selection ||\n    (editor.selection && Range.isCollapsed(editor.selection))\n  ) {\n    const leafEl = domRange.startContainer.parentElement!\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange)\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed',\n    })\n    delete leafEl.getBoundingClientRect\n  }\n}\n\n/**\n * Check if the target is in the editor.\n */\n\nexport const hasTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target)\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\n\nexport const hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return (\n    isDOMNode(target) &&\n    ReactEditor.hasDOMNode(editor, target, { editable: true })\n  )\n}\n\n/**\n * Check if the target is inside void and in an non-readonly editor.\n */\n\nexport const isTargetInsideNonReadonlyVoid = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): boolean => {\n  if (IS_READ_ONLY.get(editor)) return false\n\n  const slateNode =\n    hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target)\n  return Editor.isVoid(editor, slateNode)\n}\n\n/**\n * Check if an event is overrided by a handler.\n */\n\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>\n>(\n  event: EventType,\n  handler?: (event: EventType) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped()\n}\n\n/**\n * Check if a DOM event is overrided by a handler.\n */\n\nexport const isDOMEventHandled = <E extends Event>(\n  event: E,\n  handler?: (event: E) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.defaultPrevented\n}\n","import { Editor, Path, Range, Text } from 'slate'\n\nimport { ReactEditor } from '../../'\nimport { DOMNode } from '../../utils/dom'\n\nexport type Diff = {\n  start: number\n  end: number\n  insertText: string\n  removeText: string\n}\n\nexport interface TextInsertion {\n  text: Diff\n  path: Path\n}\n\ntype TextRange = {\n  start: number\n  end: number\n}\n\n/**\n * Returns the number of characters that are the same at the beginning of the\n * String.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the offset of the start of the difference; null if there is no difference\n */\nfunction getDiffStart(prev: string, next: string): number | null {\n  const length = Math.min(prev.length, next.length)\n\n  for (let i = 0; i < length; i++) {\n    if (prev.charAt(i) !== next.charAt(i)) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Returns the number of characters that are the same at the end of the String\n * up to `max`. Max prevents double-counting characters when there are\n * multiple duplicate characters around the diff area.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @param max  the max length to test.\n * @returns number of characters that are the same at the end of the string\n */\nfunction getDiffEnd(prev: string, next: string, max: number): number | null {\n  const prevLength = prev.length\n  const nextLength = next.length\n  const length = Math.min(prevLength, nextLength, max)\n\n  for (let i = 0; i < length; i++) {\n    const prevChar = prev.charAt(prevLength - i - 1)\n    const nextChar = next.charAt(nextLength - i - 1)\n    if (prevChar !== nextChar) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Takes two strings and returns an object representing two offsets. The\n * first, `start` represents the number of characters that are the same at\n * the front of the String. The `end` represents the number of characters\n * that are the same at the end of the String.\n *\n * Returns null if they are identical.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the difference text range; null if there are no differences.\n */\nfunction getDiffOffsets(prev: string, next: string): TextRange | null {\n  if (prev === next) return null\n  const start = getDiffStart(prev, next)\n  if (start === null) return null\n  const maxEnd = Math.min(prev.length - start, next.length - start)\n  const end = getDiffEnd(prev, next, maxEnd)!\n  if (end === null) return null\n  return { start, end }\n}\n\n/**\n * Takes a text string and returns a slice from the string at the given text range\n *\n * @param text  the text\n * @param offsets  the text range\n * @returns the text slice at text range\n */\nfunction sliceText(text: string, offsets: TextRange): string {\n  return text.slice(offsets.start, text.length - offsets.end)\n}\n\n/**\n * Takes two strings and returns a smart diff that can be used to describe the\n * change in a way that can be used as operations like inserting, removing or\n * replacing text.\n *\n * @param prev the previous text\n * @param next the next text\n * @returns the text difference\n */\nexport function diffText(prev?: string, next?: string): Diff | null {\n  if (prev === undefined || next === undefined) return null\n  const offsets = getDiffOffsets(prev, next)\n  if (offsets == null) return null\n  const insertText = sliceText(next, offsets)\n  const removeText = sliceText(prev, offsets)\n  return {\n    start: offsets.start,\n    end: prev.length - offsets.end,\n    insertText,\n    removeText,\n  }\n}\n\nexport function combineInsertedText(insertedText: TextInsertion[]): string {\n  return insertedText.reduce((acc, { text }) => `${acc}${text.insertText}`, '')\n}\n\nexport function getTextInsertion<T extends Editor>(\n  editor: T,\n  domNode: DOMNode\n): TextInsertion | undefined {\n  const node = ReactEditor.toSlateNode(editor, domNode)\n\n  if (!Text.isText(node)) {\n    return undefined\n  }\n\n  const prevText = node.text\n  let nextText = domNode.textContent!\n\n  // textContent will pad an extra \\n when the textContent ends with an \\n\n  if (nextText.endsWith('\\n')) {\n    nextText = nextText.slice(0, nextText.length - 1)\n  }\n\n  // If the text is no different, there is no diff.\n  if (nextText !== prevText) {\n    const textDiff = diffText(prevText, nextText)\n    if (textDiff !== null) {\n      const textPath = ReactEditor.findPath(editor, node)\n\n      return {\n        text: textDiff,\n        path: textPath,\n      }\n    }\n  }\n\n  return undefined\n}\n\nexport function normalizeTextInsertionRange(\n  editor: Editor,\n  range: Range | null,\n  { path, text }: TextInsertion\n) {\n  const insertionRange = {\n    anchor: { path, offset: text.start },\n    focus: { path, offset: text.end },\n  }\n\n  if (!range || !Range.isCollapsed(range)) {\n    return insertionRange\n  }\n\n  const { insertText, removeText } = text\n  const isSingleCharacterInsertion =\n    insertText.length === 1 || removeText.length === 1\n\n  /**\n   * This code handles edge cases that arise from text diffing when the\n   * inserted or removed character is a single character, and the character\n   * right before or after the anchor is the same as the one being inserted or\n   * removed.\n   *\n   * Take this example: hello|o\n   *\n   * If another `o` is inserted at the selection's anchor in the example above,\n   * it should be inserted at the anchor, but using text diffing, we actually\n   * detect that the character was inserted after the second `o`:\n   *\n   * helloo[o]|\n   *\n   * Instead, in these very specific edge cases, we assume that the character\n   * needs to be inserted after the anchor rather than where the diff was found:\n   *\n   * hello[o]|o\n   */\n  if (isSingleCharacterInsertion && Path.equals(range.anchor.path, path)) {\n    const [text] = Array.from(\n      Editor.nodes(editor, { at: range, match: Text.isText })\n    )\n\n    if (text) {\n      const [node] = text\n      const { anchor } = range\n      const characterBeforeAnchor = node.text[anchor.offset - 1]\n      const characterAfterAnchor = node.text[anchor.offset]\n\n      if (insertText.length === 1 && insertText === characterAfterAnchor) {\n        // Assume text should be inserted at the anchor\n        return range\n      }\n\n      if (removeText.length === 1 && removeText === characterBeforeAnchor) {\n        // Assume text should be removed right before the anchor\n        return {\n          anchor: { path, offset: anchor.offset - 1 },\n          focus: { path, offset: anchor.offset },\n        }\n      }\n    }\n  }\n\n  return insertionRange\n}\n","/**\n * An auto-incrementing identifier for keys.\n */\n\nlet n = 0\n\n/**\n * A class that keeps track of a key string. We use a full class here because we\n * want to be able to use them as keys in `WeakMap` objects.\n */\n\nexport class Key {\n  id: string\n\n  constructor() {\n    this.id = `${n++}`\n  }\n}\n","import { Editor, Node, Path, Point, Range, Transforms, BaseEditor } from 'slate'\n\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  NODE_TO_INDEX,\n  NODE_TO_KEY,\n  NODE_TO_PARENT,\n  EDITOR_TO_WINDOW,\n  EDITOR_TO_KEY_TO_ELEMENT,\n  IS_COMPOSING,\n} from '../utils/weak-maps'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMPoint,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n  isDOMElement,\n  isDOMSelection,\n  normalizeDOMPoint,\n  hasShadowRoot,\n} from '../utils/dom'\nimport { IS_CHROME, IS_FIREFOX } from '../utils/environment'\n\n/**\n * A React and DOM-specific version of the `Editor` interface.\n */\n\nexport interface ReactEditor extends BaseEditor {\n  insertData: (data: DataTransfer) => void\n  insertFragmentData: (data: DataTransfer) => boolean\n  insertTextData: (data: DataTransfer) => boolean\n  setFragmentData: (\n    data: DataTransfer,\n    originEvent?: 'drag' | 'copy' | 'cut'\n  ) => void\n  hasRange: (editor: ReactEditor, range: Range) => boolean\n}\n\nexport const ReactEditor = {\n  /**\n   * Check if the user is currently composing inside the editor.\n   */\n\n  isComposing(editor: ReactEditor): boolean {\n    return !!IS_COMPOSING.get(editor)\n  },\n\n  /**\n   * Return the host window of the current editor.\n   */\n\n  getWindow(editor: ReactEditor): Window {\n    const window = EDITOR_TO_WINDOW.get(editor)\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor')\n    }\n    return window\n  },\n\n  /**\n   * Find a key for a Slate node.\n   */\n\n  findKey(editor: ReactEditor, node: Node): Key {\n    let key = NODE_TO_KEY.get(node)\n\n    if (!key) {\n      key = new Key()\n      NODE_TO_KEY.set(node, key)\n    }\n\n    return key\n  },\n\n  /**\n   * Find the path of Slate node.\n   */\n\n  findPath(editor: ReactEditor, node: Node): Path {\n    const path: Path = []\n    let child = node\n\n    while (true) {\n      const parent = NODE_TO_PARENT.get(child)\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path\n        } else {\n          break\n        }\n      }\n\n      const i = NODE_TO_INDEX.get(child)\n\n      if (i == null) {\n        break\n      }\n\n      path.unshift(i)\n      child = parent\n    }\n\n    throw new Error(\n      `Unable to find the path for Slate node: ${JSON.stringify(node)}`\n    )\n  },\n\n  /**\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\n   */\n\n  findDocumentOrShadowRoot(editor: ReactEditor): Document | ShadowRoot {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = el.getRootNode()\n\n    if (\n      (root instanceof Document || root instanceof ShadowRoot) &&\n      root.getSelection != null\n    ) {\n      return root\n    }\n\n    return el.ownerDocument\n  },\n\n  /**\n   * Check if the editor is focused.\n   */\n\n  isFocused(editor: ReactEditor): boolean {\n    return !!IS_FOCUSED.get(editor)\n  },\n\n  /**\n   * Check if the editor is in read-only mode.\n   */\n\n  isReadOnly(editor: ReactEditor): boolean {\n    return !!IS_READ_ONLY.get(editor)\n  },\n\n  /**\n   * Blur the editor.\n   */\n\n  blur(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, false)\n\n    if (root.activeElement === el) {\n      el.blur()\n    }\n  },\n\n  /**\n   * Focus the editor.\n   */\n\n  focus(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, true)\n\n    if (root.activeElement !== el) {\n      el.focus({ preventScroll: true })\n    }\n  },\n\n  /**\n   * Deselect the editor.\n   */\n\n  deselect(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges()\n    }\n\n    if (selection) {\n      Transforms.deselect(editor)\n    }\n  },\n\n  /**\n   * Check if a DOM node is within the editor.\n   */\n\n  hasDOMNode(\n    editor: ReactEditor,\n    target: DOMNode,\n    options: { editable?: boolean } = {}\n  ): boolean {\n    const { editable = false } = options\n    const editorEl = ReactEditor.toDOMNode(editor, editor)\n    let targetEl\n\n    // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n    try {\n      targetEl = (isDOMElement(target)\n        ? target\n        : target.parentElement) as HTMLElement\n    } catch (err) {\n      if (\n        !err.message.includes('Permission denied to access property \"nodeType\"')\n      ) {\n        throw err\n      }\n    }\n\n    if (!targetEl) {\n      return false\n    }\n\n    return (\n      targetEl.closest(`[data-slate-editor]`) === editorEl &&\n      (!editable || targetEl.isContentEditable\n        ? true\n        : (typeof targetEl.isContentEditable === 'boolean' && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined\n            // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable=\"false\"(readOnly)\n            targetEl.closest('[contenteditable=\"false\"]') === editorEl) ||\n          !!targetEl.getAttribute('data-slate-zero-width'))\n    )\n  },\n\n  /**\n   * Insert data from a `DataTransfer` into the editor.\n   */\n\n  insertData(editor: ReactEditor, data: DataTransfer): void {\n    editor.insertData(data)\n  },\n\n  /**\n   * Insert fragment data from a `DataTransfer` into the editor.\n   */\n\n  insertFragmentData(editor: ReactEditor, data: DataTransfer): boolean {\n    return editor.insertFragmentData(data)\n  },\n\n  /**\n   * Insert text data from a `DataTransfer` into the editor.\n   */\n\n  insertTextData(editor: ReactEditor, data: DataTransfer): boolean {\n    return editor.insertTextData(data)\n  },\n\n  /**\n   * Sets data from the currently selected fragment on a `DataTransfer`.\n   */\n\n  setFragmentData(\n    editor: ReactEditor,\n    data: DataTransfer,\n    originEvent?: 'drag' | 'copy' | 'cut'\n  ): void {\n    editor.setFragmentData(data, originEvent)\n  },\n\n  /**\n   * Find the native DOM element from a Slate node.\n   */\n\n  toDOMNode(editor: ReactEditor, node: Node): HTMLElement {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    const domNode = Editor.isEditor(node)\n      ? EDITOR_TO_ELEMENT.get(editor)\n      : KEY_TO_ELEMENT?.get(ReactEditor.findKey(editor, node))\n\n    if (!domNode) {\n      throw new Error(\n        `Cannot resolve a DOM node from Slate node: ${JSON.stringify(node)}`\n      )\n    }\n\n    return domNode\n  },\n\n  /**\n   * Find a native DOM selection point from a Slate point.\n   */\n\n  toDOMPoint(editor: ReactEditor, point: Point): DOMPoint {\n    const [node] = Editor.node(editor, point.path)\n    const el = ReactEditor.toDOMNode(editor, node)\n    let domPoint: DOMPoint | undefined\n\n    // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n    if (Editor.void(editor, { at: point })) {\n      point = { path: point.path, offset: 0 }\n    }\n\n    // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n    const selector = `[data-slate-string], [data-slate-zero-width]`\n    const texts = Array.from(el.querySelectorAll(selector))\n    let start = 0\n\n    for (const text of texts) {\n      const domNode = text.childNodes[0] as HTMLElement\n\n      if (domNode == null || domNode.textContent == null) {\n        continue\n      }\n\n      const { length } = domNode.textContent\n      const attr = text.getAttribute('data-slate-length')\n      const trueLength = attr == null ? length : parseInt(attr, 10)\n      const end = start + trueLength\n\n      if (point.offset <= end) {\n        const offset = Math.min(length, Math.max(0, point.offset - start))\n        domPoint = [domNode, offset]\n        break\n      }\n\n      start = end\n    }\n\n    if (!domPoint) {\n      throw new Error(\n        `Cannot resolve a DOM point from Slate point: ${JSON.stringify(point)}`\n      )\n    }\n\n    return domPoint\n  },\n\n  /**\n   * Find a native DOM range from a Slate `range`.\n   *\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\n   *\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\n   */\n\n  toDOMRange(editor: ReactEditor, range: Range): DOMRange {\n    const { anchor, focus } = range\n    const isBackward = Range.isBackward(range)\n    const domAnchor = ReactEditor.toDOMPoint(editor, anchor)\n    const domFocus = Range.isCollapsed(range)\n      ? domAnchor\n      : ReactEditor.toDOMPoint(editor, focus)\n\n    const window = ReactEditor.getWindow(editor)\n    const domRange = window.document.createRange()\n    const [startNode, startOffset] = isBackward ? domFocus : domAnchor\n    const [endNode, endOffset] = isBackward ? domAnchor : domFocus\n\n    // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n    const startEl = (isDOMElement(startNode)\n      ? startNode\n      : startNode.parentElement) as HTMLElement\n    const isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width')\n    const endEl = (isDOMElement(endNode)\n      ? endNode\n      : endNode.parentElement) as HTMLElement\n    const isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width')\n\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset)\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset)\n    return domRange\n  },\n\n  /**\n   * Find a Slate node from a native DOM `element`.\n   */\n\n  toSlateNode(editor: ReactEditor, domNode: DOMNode): Node {\n    let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(`[data-slate-node]`)\n    }\n\n    const node = domEl ? ELEMENT_TO_NODE.get(domEl as HTMLElement) : null\n\n    if (!node) {\n      throw new Error(`Cannot resolve a Slate node from DOM node: ${domEl}`)\n    }\n\n    return node\n  },\n\n  /**\n   * Get the target range from a DOM `event`.\n   */\n\n  findEventRange(editor: ReactEditor, event: any): Range {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent\n    }\n\n    const { clientX: x, clientY: y, target } = event\n\n    if (x == null || y == null) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    const node = ReactEditor.toSlateNode(editor, event.target)\n    const path = ReactEditor.findPath(editor, node)\n\n    // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n    if (Editor.isVoid(editor, node)) {\n      const rect = target.getBoundingClientRect()\n      const isPrev = editor.isInline(node)\n        ? x - rect.left < rect.left + rect.width - x\n        : y - rect.top < rect.top + rect.height - y\n\n      const edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end',\n      })\n      const point = isPrev\n        ? Editor.before(editor, edge)\n        : Editor.after(editor, edge)\n\n      if (point) {\n        const range = Editor.range(editor, point)\n        return range\n      }\n    }\n\n    // Else resolve a range from the caret position where the drop occured.\n    let domRange\n    const { document } = ReactEditor.getWindow(editor)\n\n    // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y)\n    } else {\n      const position = document.caretPositionFromPoint(x, y)\n\n      if (position) {\n        domRange = document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    // Resolve a Slate range from the DOM range.\n    const range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      suppressThrow: false,\n    })\n    return range\n  },\n\n  /**\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\n   */\n\n  toSlatePoint<T extends boolean>(\n    editor: ReactEditor,\n    domPoint: DOMPoint,\n    options: {\n      exactMatch: T\n      suppressThrow: T\n    }\n  ): T extends true ? Point | null : Point {\n    const { exactMatch, suppressThrow } = options\n    const [nearestNode, nearestOffset] = exactMatch\n      ? domPoint\n      : normalizeDOMPoint(domPoint)\n    const parentNode = nearestNode.parentNode as DOMElement\n    let textNode: DOMElement | null = null\n    let offset = 0\n\n    if (parentNode) {\n      const editorEl = ReactEditor.toDOMNode(editor, editor)\n      const potentialVoidNode = parentNode.closest('[data-slate-void=\"true\"]')\n      // Need to ensure that the closest void node is actually a void node\n      // within this editor, and not a void node within some parent editor. This can happen\n      // if this editor is within a void node of another editor (\"nested editors\", like in\n      // the \"Editable Voids\" example on the docs site).\n      const voidNode =\n        potentialVoidNode && editorEl.contains(potentialVoidNode)\n          ? potentialVoidNode\n          : null\n      let leafNode = parentNode.closest('[data-slate-leaf]')\n      let domNode: DOMElement | null = null\n\n      // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')\n\n        if (textNode) {\n          const window = ReactEditor.getWindow(editor)\n          const range = window.document.createRange()\n          range.setStart(textNode, 0)\n          range.setEnd(nearestNode, nearestOffset)\n\n          const contents = range.cloneContents()\n          const removals = [\n            ...Array.prototype.slice.call(\n              contents.querySelectorAll('[data-slate-zero-width]')\n            ),\n            ...Array.prototype.slice.call(\n              contents.querySelectorAll('[contenteditable=false]')\n            ),\n          ]\n\n          removals.forEach(el => {\n            el!.parentNode!.removeChild(el)\n          })\n\n          // COMPAT: Edge has a bug where Range.prototype.toString() will\n          // convert \\n into \\r\\n. The bug causes a loop when slate-react\n          // attempts to reposition its cursor to match the native position. Use\n          // textContent.length instead.\n          // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n          offset = contents.textContent!.length\n          domNode = textNode\n        }\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]')!\n\n        // COMPAT: In read-only editors the leaf is not rendered.\n        if (!leafNode) {\n          offset = 1\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n          domNode = leafNode\n          offset = domNode.textContent!.length\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(el => {\n            offset -= el.textContent!.length\n          })\n        }\n      }\n\n      if (\n        domNode &&\n        offset === domNode.textContent!.length &&\n        // COMPAT: If the parent node is a Slate zero-width space, editor is\n        // because the text node should have no characters. However, during IME\n        // composition the ASCII characters will be prepended to the zero-width\n        // space, so subtract 1 from the offset to account for the zero-width\n        // space character.\n        (parentNode.hasAttribute('data-slate-zero-width') ||\n          // COMPAT: In Firefox, `range.cloneContents()` returns an extra trailing '\\n'\n          // when the document ends with a new-line character. This results in the offset\n          // length being off by one, so we need to subtract one to account for this.\n          (IS_FIREFOX && domNode.textContent?.endsWith('\\n\\n')))\n      ) {\n        offset--\n      }\n    }\n\n    if (!textNode) {\n      if (suppressThrow) {\n        return null as T extends true ? Point | null : Point\n      }\n      throw new Error(\n        `Cannot resolve a Slate point from DOM point: ${domPoint}`\n      )\n    }\n\n    // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n    const slateNode = ReactEditor.toSlateNode(editor, textNode!)\n    const path = ReactEditor.findPath(editor, slateNode)\n    return { path, offset } as T extends true ? Point | null : Point\n  },\n\n  /**\n   * Find a Slate range from a DOM range or selection.\n   */\n\n  toSlateRange<T extends boolean>(\n    editor: ReactEditor,\n    domRange: DOMRange | DOMStaticRange | DOMSelection,\n    options: {\n      exactMatch: T\n      suppressThrow: T\n    }\n  ): T extends true ? Range | null : Range {\n    const { exactMatch, suppressThrow } = options\n    const el = isDOMSelection(domRange)\n      ? domRange.anchorNode\n      : domRange.startContainer\n    let anchorNode\n    let anchorOffset\n    let focusNode\n    let focusOffset\n    let isCollapsed\n\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode\n        anchorOffset = domRange.anchorOffset\n        focusNode = domRange.focusNode\n        focusOffset = domRange.focusOffset\n        // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed =\n            domRange.anchorNode === domRange.focusNode &&\n            domRange.anchorOffset === domRange.focusOffset\n        } else {\n          isCollapsed = domRange.isCollapsed\n        }\n      } else {\n        anchorNode = domRange.startContainer\n        anchorOffset = domRange.startOffset\n        focusNode = domRange.endContainer\n        focusOffset = domRange.endOffset\n        isCollapsed = domRange.collapsed\n      }\n    }\n\n    if (\n      anchorNode == null ||\n      focusNode == null ||\n      anchorOffset == null ||\n      focusOffset == null\n    ) {\n      throw new Error(\n        `Cannot resolve a Slate range from DOM range: ${domRange}`\n      )\n    }\n\n    const anchor = ReactEditor.toSlatePoint(\n      editor,\n      [anchorNode, anchorOffset],\n      { exactMatch, suppressThrow }\n    )\n    if (!anchor) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    const focus = isCollapsed\n      ? anchor\n      : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], {\n          exactMatch,\n          suppressThrow,\n        })\n    if (!focus) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    let range: Range = { anchor: anchor as Point, focus: focus as Point }\n    // if the selection is a hanging range that ends in a void\n    // and the DOM focus is an Element\n    // (meaning that the selection ends before the element)\n    // unhang the range to avoid mistakenly including the void\n    if (\n      Range.isExpanded(range) &&\n      Range.isForward(range) &&\n      isDOMElement(focusNode) &&\n      Editor.void(editor, { at: range.focus, mode: 'highest' })\n    ) {\n      range = Editor.unhangRange(editor, range, { voids: true })\n    }\n\n    return (range as unknown) as T extends true ? Range | null : Range\n  },\n\n  hasRange(editor: ReactEditor, range: Range): boolean {\n    const { anchor, focus } = range\n    return (\n      Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path)\n    )\n  },\n}\n","import { ReactEditor } from '../../plugin/react-editor'\nimport { Editor, Range, Transforms, Text } from 'slate'\nimport {\n  IS_ON_COMPOSITION_END,\n  EDITOR_ON_COMPOSITION_TEXT,\n} from '../../utils/weak-maps'\n\nimport { DOMNode } from '../../utils/dom'\n\nimport {\n  normalizeTextInsertionRange,\n  combineInsertedText,\n  TextInsertion,\n} from './diff-text'\nimport {\n  gatherMutationData,\n  isDeletion,\n  isLineBreak,\n  isRemoveLeafNodes,\n  isReplaceExpandedSelection,\n  isTextInsertion,\n} from './mutation-detection'\n\n// Replace with `const debug = console.log` to debug\nconst debug = (...message: any[]) => {}\n\n/**\n * Based loosely on:\n *\n * https://github.com/facebook/draft-js/blob/master/src/component/handlers/composition/DOMObserver.js\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\n *\n * The input manager attempts to map observed mutations on the document to a\n * set of operations in order to reconcile Slate's internal value with the DOM.\n *\n * Mutations are processed synchronously as they come in. Only mutations that occur\n * during a user input loop are processed, as other mutations can occur within the\n * document that were not initiated by user input.\n *\n * The mutation reconciliation process attempts to match mutations to the following\n * patterns:\n *\n * - Text updates\n * - Deletions\n * - Line breaks\n *\n * @param editor\n * @param restoreDOM\n */\n\nexport class AndroidInputManager {\n  constructor(private editor: ReactEditor, private restoreDOM: () => void) {\n    this.editor = editor\n    this.restoreDOM = restoreDOM\n  }\n\n  /**\n   * Handle MutationObserver flush\n   *\n   * @param mutations\n   */\n\n  flush = (mutations: MutationRecord[]) => {\n    debug('flush')\n\n    try {\n      this.reconcileMutations(mutations)\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err)\n\n      // Failed to reconcile mutations, restore DOM to its previous state\n      this.restoreDOM()\n    }\n  }\n\n  /**\n   * Reconcile a batch of mutations\n   *\n   * @param mutations\n   */\n\n  private reconcileMutations = (mutations: MutationRecord[]) => {\n    const mutationData = gatherMutationData(this.editor, mutations)\n    const { insertedText, removedNodes } = mutationData\n\n    debug('processMutations', mutations, mutationData)\n\n    if (isReplaceExpandedSelection(this.editor, mutationData)) {\n      const text = combineInsertedText(insertedText)\n      this.replaceExpandedSelection(text)\n    } else if (isLineBreak(this.editor, mutationData)) {\n      this.insertBreak()\n    } else if (isRemoveLeafNodes(this.editor, mutationData)) {\n      this.removeLeafNodes(removedNodes)\n    } else if (isDeletion(this.editor, mutationData)) {\n      this.deleteBackward()\n    } else if (isTextInsertion(this.editor, mutationData)) {\n      this.insertText(insertedText)\n    }\n  }\n\n  /**\n   * Apply text diff\n   */\n\n  private insertText = (insertedText: TextInsertion[]) => {\n    debug('insertText')\n\n    const { selection } = this.editor\n\n    // If it is in composing or after `onCompositionend`, set `EDITOR_ON_COMPOSITION_TEXT` and return.\n    // Text will be inserted on compositionend event.\n    if (\n      ReactEditor.isComposing(this.editor) ||\n      IS_ON_COMPOSITION_END.get(this.editor)\n    ) {\n      EDITOR_ON_COMPOSITION_TEXT.set(this.editor, insertedText)\n      IS_ON_COMPOSITION_END.set(this.editor, false)\n      return\n    }\n\n    // Insert the batched text diffs\n    insertedText.forEach(insertion => {\n      const text = insertion.text.insertText\n      const at = normalizeTextInsertionRange(this.editor, selection, insertion)\n      Transforms.setSelection(this.editor, at)\n      Editor.insertText(this.editor, text)\n    })\n  }\n\n  /**\n   * Handle line breaks\n   */\n\n  private insertBreak = () => {\n    debug('insertBreak')\n\n    const { selection } = this.editor\n\n    Editor.insertBreak(this.editor)\n\n    this.restoreDOM()\n\n    if (selection) {\n      // Compat: Move selection to the newly inserted block if it has not moved\n      setTimeout(() => {\n        if (\n          this.editor.selection &&\n          Range.equals(selection, this.editor.selection)\n        ) {\n          Transforms.move(this.editor)\n        }\n      }, 100)\n    }\n  }\n\n  /**\n   * Handle expanded selection being deleted or replaced by text\n   */\n\n  private replaceExpandedSelection = (text: string) => {\n    debug('replaceExpandedSelection')\n\n    // Delete expanded selection\n    Editor.deleteFragment(this.editor)\n\n    if (text.length) {\n      // Selection was replaced by text, insert the entire text diff\n      Editor.insertText(this.editor, text)\n    }\n\n    this.restoreDOM()\n  }\n\n  /**\n   * Handle `backspace` that merges blocks\n   */\n\n  private deleteBackward = () => {\n    debug('deleteBackward')\n\n    Editor.deleteBackward(this.editor)\n    ReactEditor.focus(this.editor)\n\n    this.restoreDOM()\n  }\n\n  /**\n   * Handle mutations that remove specific leaves\n   */\n  private removeLeafNodes = (nodes: DOMNode[]) => {\n    for (const node of nodes) {\n      const slateNode = ReactEditor.toSlateNode(this.editor, node)\n\n      if (slateNode) {\n        const path = ReactEditor.findPath(this.editor, slateNode)\n\n        Transforms.delete(this.editor, { at: path })\n        this.restoreDOM()\n      }\n    }\n  }\n}\n\nexport default AndroidInputManager\n","import { Editor, Node, Path, Range } from 'slate'\n\nimport { DOMNode } from '../../utils/dom'\nimport { ReactEditor } from '../..'\nimport { TextInsertion, getTextInsertion } from './diff-text'\n\ninterface MutationData {\n  addedNodes: DOMNode[]\n  removedNodes: DOMNode[]\n  insertedText: TextInsertion[]\n  characterDataMutations: MutationRecord[]\n}\n\ntype MutationDetection = (editor: Editor, mutationData: MutationData) => boolean\n\nexport function gatherMutationData(\n  editor: Editor,\n  mutations: MutationRecord[]\n): MutationData {\n  const addedNodes: DOMNode[] = []\n  const removedNodes: DOMNode[] = []\n  const insertedText: TextInsertion[] = []\n  const characterDataMutations: MutationRecord[] = []\n\n  mutations.forEach(mutation => {\n    switch (mutation.type) {\n      case 'childList': {\n        if (mutation.addedNodes.length) {\n          mutation.addedNodes.forEach(addedNode => {\n            addedNodes.push(addedNode)\n          })\n        }\n\n        mutation.removedNodes.forEach(removedNode => {\n          removedNodes.push(removedNode)\n        })\n\n        break\n      }\n      case 'characterData': {\n        characterDataMutations.push(mutation)\n\n        // Changes to text nodes should consider the parent element\n        const { parentNode } = mutation.target\n\n        if (!parentNode) {\n          return\n        }\n\n        const textInsertion = getTextInsertion(editor, parentNode)\n\n        if (!textInsertion) {\n          return\n        }\n\n        // If we've already detected a diff at that path, we can return early\n        if (\n          insertedText.some(({ path }) => Path.equals(path, textInsertion.path))\n        ) {\n          return\n        }\n\n        // Add the text diff to the array of detected text insertions that need to be reconciled\n        insertedText.push(textInsertion)\n      }\n    }\n  })\n\n  return { addedNodes, removedNodes, insertedText, characterDataMutations }\n}\n\n/**\n * In general, when a line break occurs, there will be more `addedNodes` than `removedNodes`.\n *\n * This isn't always the case however. In some cases, there will be more `removedNodes` than\n * `addedNodes`.\n *\n * To account for these edge cases, the most reliable strategy to detect line break mutations\n * is to check whether a new block was inserted of the same type as the current block.\n */\nexport const isLineBreak: MutationDetection = (editor, { addedNodes }) => {\n  const { selection } = editor\n  const parentNode = selection\n    ? Node.parent(editor, selection.anchor.path)\n    : null\n  const parentDOMNode = parentNode\n    ? ReactEditor.toDOMNode(editor, parentNode)\n    : null\n\n  if (!parentDOMNode) {\n    return false\n  }\n\n  return addedNodes.some(\n    addedNode =>\n      addedNode instanceof HTMLElement &&\n      addedNode.tagName === parentDOMNode?.tagName\n  )\n}\n\n/**\n * So long as we check for line break mutations before deletion mutations,\n * we can safely assume that a set of mutations was a deletion if there are\n * removed nodes.\n */\nexport const isDeletion: MutationDetection = (_, { removedNodes }) => {\n  return removedNodes.length > 0\n}\n\n/**\n * If the selection was expanded and there are removed nodes,\n * the contents of the selection need to be replaced with the diff\n */\nexport const isReplaceExpandedSelection: MutationDetection = (\n  { selection },\n  { removedNodes }\n) => {\n  return selection\n    ? Range.isExpanded(selection) && removedNodes.length > 0\n    : false\n}\n\n/**\n * Plain text insertion\n */\nexport const isTextInsertion: MutationDetection = (_, { insertedText }) => {\n  return insertedText.length > 0\n}\n\n/**\n * Edge case. Detect mutations that remove leaf nodes and also update character data\n */\nexport const isRemoveLeafNodes: MutationDetection = (\n  _,\n  { addedNodes, characterDataMutations, removedNodes }\n) => {\n  return (\n    removedNodes.length > 0 &&\n    addedNodes.length === 0 &&\n    characterDataMutations.length > 0\n  )\n}\n","import { RefObject, useEffect, useState } from 'react'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\n\nexport function useMutationObserver(\n  node: RefObject<HTMLElement>,\n  callback: MutationCallback,\n  options: MutationObserverInit\n) {\n  const [mutationObserver] = useState(() => new MutationObserver(callback))\n\n  useIsomorphicLayoutEffect(() => {\n    // Disconnect mutation observer during render phase\n    mutationObserver.disconnect()\n  })\n\n  useEffect(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined')\n    }\n\n    // Attach mutation observer after render phase has finished\n    mutationObserver.observe(node.current, options)\n\n    // Clean up after effect\n    return mutationObserver.disconnect.bind(mutationObserver)\n  })\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { Node as SlateNode, Path } from 'slate'\nimport { ReactEditor, useSlateStatic } from '../..'\nimport { DOMNode, isDOMElement } from '../../utils/dom'\nimport { ELEMENT_TO_NODE, NODE_TO_RESTORE_DOM } from '../../utils/weak-maps'\nimport { useMutationObserver } from './use-mutation-observer'\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  childList: true,\n  characterData: true,\n  subtree: true,\n}\n\nfunction findClosestKnowSlateNode(domNode: DOMNode): SlateNode | null {\n  let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n  if (domEl && !domEl.hasAttribute('data-slate-node')) {\n    domEl = domEl.closest(`[data-slate-node]`)\n  }\n\n  const slateNode = domEl && ELEMENT_TO_NODE.get(domEl as HTMLElement)\n  if (slateNode) {\n    return slateNode\n  }\n\n  // Unknown dom element with a slate-slate-node attribute => the IME\n  // most likely duplicated the node so we have to restore the parent\n  return domEl?.parentElement\n    ? findClosestKnowSlateNode(domEl.parentElement)\n    : null\n}\n\nexport function useRestoreDom(\n  node: React.RefObject<HTMLElement>,\n  receivedUserInput: React.RefObject<boolean>\n) {\n  const editor = useSlateStatic()\n  const mutatedNodes = useRef<Set<SlateNode>>(new Set())\n\n  const handleDOMMutation = useCallback((mutations: MutationRecord[]) => {\n    if (!receivedUserInput.current) {\n      return\n    }\n\n    mutations.forEach(({ target }) => {\n      const slateNode = findClosestKnowSlateNode(target)\n      if (!slateNode) {\n        return\n      }\n\n      return mutatedNodes.current.add(slateNode)\n    })\n  }, [])\n\n  useMutationObserver(node, handleDOMMutation, MUTATION_OBSERVER_CONFIG)\n\n  // Clear mutated nodes on every render\n  mutatedNodes.current.clear()\n  const restore = useCallback(() => {\n    const mutated = Array.from(mutatedNodes.current.values())\n\n    // Filter out child nodes of nodes that will be restored anyway\n    const nodesToRestore = mutated.filter(\n      n =>\n        !mutated.some(m =>\n          Path.isParent(\n            ReactEditor.findPath(editor, m),\n            ReactEditor.findPath(editor, n)\n          )\n        )\n    )\n\n    nodesToRestore.forEach(n => {\n      NODE_TO_RESTORE_DOM.get(n)?.()\n    })\n\n    mutatedNodes.current.clear()\n  }, [])\n\n  return restore\n}\n","import { RefObject, useCallback, useMemo, useRef, useState } from 'react'\n\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nimport { AndroidInputManager } from './android-input-manager'\nimport { useRestoreDom } from './use-restore-dom'\nimport { useMutationObserver } from './use-mutation-observer'\nimport { useTrackUserInput } from './use-track-user-input'\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  subtree: true,\n}\n\nexport function useAndroidInputManager(node: RefObject<HTMLElement>) {\n  const editor = useSlateStatic()\n\n  const { receivedUserInput, onUserInput } = useTrackUserInput()\n  const restoreDom = useRestoreDom(node, receivedUserInput)\n\n  const inputManager = useMemo(\n    () => new AndroidInputManager(editor, restoreDom),\n    [restoreDom, editor]\n  )\n\n  const timeoutId = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const isReconciling = useRef(false)\n  const flush = useCallback((mutations: MutationRecord[]) => {\n    if (!receivedUserInput.current) {\n      return\n    }\n\n    isReconciling.current = true\n    inputManager.flush(mutations)\n\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current)\n    }\n\n    timeoutId.current = setTimeout(() => {\n      isReconciling.current = false\n      timeoutId.current = null\n    }, 250)\n  }, [])\n\n  useMutationObserver(node, flush, MUTATION_OBSERVER_CONFIG)\n\n  return {\n    isReconciling,\n    onUserInput,\n  }\n}\n","import { useCallback, useEffect, useRef } from 'react'\n\nimport { ReactEditor } from '../..'\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nexport function useTrackUserInput() {\n  const editor = useSlateStatic()\n  const receivedUserInput = useRef<boolean>(false)\n  const animationFrameRef = useRef<number | null>(null)\n  const onUserInput = useCallback(() => {\n    if (receivedUserInput.current === false) {\n      const window = ReactEditor.getWindow(editor)\n\n      receivedUserInput.current = true\n\n      if (animationFrameRef.current) {\n        window.cancelAnimationFrame(animationFrameRef.current)\n      }\n\n      animationFrameRef.current = window.requestAnimationFrame(() => {\n        receivedUserInput.current = false\n        animationFrameRef.current = null\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    // Reset user input tracking on every render\n    if (receivedUserInput.current) {\n      receivedUserInput.current = false\n    }\n  })\n\n  return {\n    receivedUserInput,\n    onUserInput,\n  }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Editor, Element, Node, Range, Transforms, Path, Text } from 'slate'\nimport throttle from 'lodash/throttle'\nimport debounce from 'lodash/debounce'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport { DefaultPlaceholder, ReactEditor } from '../..'\nimport { ReadOnlyContext } from '../../hooks/use-read-only'\nimport { useSlate } from '../../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../../hooks/use-decorate'\nimport {\n  DOMElement,\n  isDOMElement,\n  isDOMNode,\n  getDefaultView,\n  getClipboardData,\n} from '../../utils/dom'\nimport {\n  EDITOR_TO_ELEMENT,\n  EDITOR_TO_WINDOW,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  PLACEHOLDER_SYMBOL,\n  IS_COMPOSING,\n  IS_ON_COMPOSITION_END,\n  EDITOR_ON_COMPOSITION_TEXT,\n} from '../../utils/weak-maps'\nimport { normalizeTextInsertionRange } from './diff-text'\n\nimport { EditableProps, hasTarget } from '../editable'\nimport useChildren from '../../hooks/use-children'\nimport {\n  defaultDecorate,\n  hasEditableTarget,\n  isEventHandled,\n  isDOMEventHandled,\n  isTargetInsideNonReadonlyVoid,\n} from '../editable'\n\nimport { useAndroidInputManager } from './use-android-input-manager'\nimport { useContentKey } from '../../hooks/use-content-key'\n\n/**\n * Editable.\n */\n\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nconst RESOLVE_DELAY = 20\n\nexport const AndroidEditable = (props: EditableProps): JSX.Element => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  // Rerender editor when composition status changed\n  const [isComposing, setIsComposing] = useState(false)\n  const ref = useRef<HTMLDivElement>(null)\n  const inputManager = useAndroidInputManager(ref)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isComposing: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  const contentKey = useContentKey(editor)\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n\n    try {\n      // Make sure the DOM selection state is in sync.\n      const { selection } = editor\n      const root = ReactEditor.findDocumentOrShadowRoot(editor)\n      const domSelection = root.getSelection()\n\n      if (\n        state.isComposing ||\n        !domSelection ||\n        !ReactEditor.isFocused(editor)\n      ) {\n        return\n      }\n\n      const hasDomSelection = domSelection.type !== 'None'\n\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return\n      }\n\n      // verify that the dom selection is in the editor\n      const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n      let hasDomSelectionInEditor = false\n      if (\n        editorElement.contains(domSelection.anchorNode) &&\n        editorElement.contains(domSelection.focusNode)\n      ) {\n        hasDomSelectionInEditor = true\n      }\n\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection) {\n        const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          suppressThrow: true,\n        })\n        if (slateRange && Range.equals(slateRange, selection)) {\n          return\n        }\n      }\n\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: false,\n        })\n        return\n      }\n\n      // Otherwise the DOM selection is out of sync, so update it.\n      const el = ReactEditor.toDOMNode(editor, editor)\n      state.isUpdatingSelection = true\n\n      const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n      if (newDomRange) {\n        if (Range.isBackward(selection!)) {\n          domSelection.setBaseAndExtent(\n            newDomRange.endContainer,\n            newDomRange.endOffset,\n            newDomRange.startContainer,\n            newDomRange.startOffset\n          )\n        } else {\n          domSelection.setBaseAndExtent(\n            newDomRange.startContainer,\n            newDomRange.startOffset,\n            newDomRange.endContainer,\n            newDomRange.endOffset\n          )\n        }\n        const leafEl = newDomRange.startContainer.parentElement!\n        leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(\n          newDomRange\n        )\n        scrollIntoView(leafEl, {\n          scrollMode: 'if-needed',\n          boundary: el,\n        })\n        // @ts-ignore\n        delete leafEl.getBoundingClientRect\n      } else {\n        domSelection.removeAllRanges()\n      }\n\n      setTimeout(() => {\n        state.isUpdatingSelection = false\n      })\n    } catch {\n      // Failed to update selection, likely due to reconciliation error\n      state.isUpdatingSelection = false\n    }\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      try {\n        if (\n          !state.isComposing &&\n          !state.isUpdatingSelection &&\n          !inputManager.isReconciling.current\n        ) {\n          const root = ReactEditor.findDocumentOrShadowRoot(editor)\n          const { activeElement } = root\n          const el = ReactEditor.toDOMNode(editor, editor)\n          const domSelection = root.getSelection()\n\n          if (activeElement === el) {\n            state.latestElement = activeElement\n            IS_FOCUSED.set(editor, true)\n          } else {\n            IS_FOCUSED.delete(editor)\n          }\n\n          if (!domSelection) {\n            return Transforms.deselect(editor)\n          }\n\n          const { anchorNode, focusNode } = domSelection\n\n          const anchorNodeSelectable =\n            hasEditableTarget(editor, anchorNode) ||\n            isTargetInsideNonReadonlyVoid(editor, anchorNode)\n\n          const focusNodeSelectable =\n            hasEditableTarget(editor, focusNode) ||\n            isTargetInsideNonReadonlyVoid(editor, focusNode)\n\n          if (anchorNodeSelectable && focusNodeSelectable) {\n            const range = ReactEditor.toSlateRange(editor, domSelection, {\n              exactMatch: false,\n              suppressThrow: false,\n            })\n            Transforms.select(editor, range)\n          } else {\n            Transforms.deselect(editor)\n          }\n        }\n      } catch {\n        // Failed to update selection, likely due to reconciliation error\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  const scheduleOnDOMSelectionChange = useMemo(\n    () => debounce(onDOMSelectionChange, 0),\n    [onDOMSelectionChange]\n  )\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n        // triggering a `beforeinput` expecting the change to be applied to the immediately before\n        // set selection.\n        scheduleOnDOMSelectionChange.flush()\n\n        inputManager.onUserInput()\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  useIsomorphicLayoutEffect(() => {\n    const node = ref.current\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    node?.addEventListener('beforeinput', onDOMBeforeInput)\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    return () => node?.removeEventListener('beforeinput', onDOMBeforeInput)\n  }, [contentKey, propsOnDOMBeforeInput])\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener(\n      'selectionchange',\n      scheduleOnDOMSelectionChange\n    )\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        scheduleOnDOMSelectionChange\n      )\n    }\n  }, [scheduleOnDOMSelectionChange])\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === '' &&\n    !isComposing\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          key={contentKey}\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          spellCheck={attributes.spellCheck}\n          autoCorrect={attributes.autoCorrect}\n          autoCapitalize={attributes.autoCapitalize}\n          data-slate-editor\n          data-slate-node=\"value\"\n          contentEditable={readOnly ? undefined : true}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData, 'copy')\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData, 'cut')\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onClick={useCallback(\n            (event: React.MouseEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onClick) &&\n                isDOMNode(event.target)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n\n                // At this time, the Slate document may be arbitrarily different,\n                // because onClick handlers can change the document before we get here.\n                // Therefore we must check that this path actually exists,\n                // and that it still refers to the same node.\n                if (Editor.hasPath(editor, path)) {\n                  const lookupNode = Node.get(editor, path)\n                  if (lookupNode === node) {\n                    const start = Editor.start(editor, path)\n                    const end = Editor.end(editor, path)\n\n                    const startVoid = Editor.void(editor, { at: start })\n                    const endVoid = Editor.void(editor, { at: end })\n\n                    if (\n                      startVoid &&\n                      endVoid &&\n                      Path.equals(startVoid[1], endVoid[1])\n                    ) {\n                      const range = Editor.range(editor, start)\n                      Transforms.select(editor, range)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onClick]\n          )}\n          onCompositionEnd={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionEnd)\n              ) {\n                scheduleOnDOMSelectionChange.flush()\n                setTimeout(() => {\n                  state.isComposing && setIsComposing(false)\n                  state.isComposing = false\n\n                  IS_COMPOSING.set(editor, false)\n                  IS_ON_COMPOSITION_END.set(editor, true)\n\n                  const insertedText =\n                    EDITOR_ON_COMPOSITION_TEXT.get(editor) || []\n\n                  // `insertedText` is set in `MutationObserver` constructor.\n                  // If open phone keyboard association function, `CompositionEvent` will be triggered.\n                  if (!insertedText.length) {\n                    return\n                  }\n\n                  EDITOR_ON_COMPOSITION_TEXT.set(editor, [])\n\n                  const { selection } = editor\n\n                  insertedText.forEach(insertion => {\n                    const text = insertion.text.insertText\n                    const at = normalizeTextInsertionRange(\n                      editor,\n                      selection,\n                      insertion\n                    )\n                    Transforms.setSelection(editor, at)\n                    Editor.insertText(editor, text)\n                  })\n                }, RESOLVE_DELAY)\n              }\n            },\n            [attributes.onCompositionEnd]\n          )}\n          onCompositionUpdate={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionUpdate)\n              ) {\n                !state.isComposing && setIsComposing(true)\n                state.isComposing = true\n                IS_COMPOSING.set(editor, true)\n              }\n            },\n            [attributes.onCompositionUpdate]\n          )}\n          onCompositionStart={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionStart)\n              ) {\n                !state.isComposing && setIsComposing(true)\n                state.isComposing = true\n                IS_COMPOSING.set(editor, true)\n              }\n            },\n            [attributes.onCompositionStart]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              // this will make application/x-slate-fragment exist when onPaste attributes is passed\n              event.clipboardData = getClipboardData(event.clipboardData)\n              // This unfortunately needs to be handled with paste events instead.\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste) &&\n                !readOnly\n              ) {\n                event.preventDefault()\n                ReactEditor.insertData(editor, event.clipboardData)\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          {useChildren({\n            decorations,\n            node: editor,\n            renderElement,\n            renderPlaceholder,\n            renderLeaf,\n            selection: editor.selection,\n          })}\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\n\nexport const FocusedContext = createContext(false)\n\n/**\n * Get the current `focused` state of the editor.\n */\n\nexport const useFocused = (): boolean => {\n  return useContext(FocusedContext)\n}\n","import {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react'\nimport { Editor } from 'slate'\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect'\n\nfunction isError(error: any): error is Error {\n  return error instanceof Error\n}\n\ntype EditorChangeHandler = (editor: Editor) => void\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */\n\nexport const SlateSelectorContext = createContext<{\n  getSlate: () => Editor\n  addEventListener: (callback: EditorChangeHandler) => () => void\n}>({} as any)\n\nconst refEquality = (a: any, b: any) => a === b\n\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */\nexport function useSlateSelector<T>(\n  selector: (editor: Editor) => T,\n  equalityFn: (a: T, b: T) => boolean = refEquality\n) {\n  const [, forceRender] = useReducer(s => s + 1, 0)\n  const context = useContext(SlateSelectorContext)\n  if (!context) {\n    throw new Error(\n      `The \\`useSlateSelector\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n  const { getSlate, addEventListener } = context\n\n  const latestSubscriptionCallbackError = useRef<Error | undefined>()\n  const latestSelector = useRef<(editor: Editor) => T>(() => null as any)\n  const latestSelectedState = useRef<T>((null as any) as T)\n  let selectedState: T\n\n  try {\n    if (\n      selector !== latestSelector.current ||\n      latestSubscriptionCallbackError.current\n    ) {\n      selectedState = selector(getSlate())\n    } else {\n      selectedState = latestSelectedState.current\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`\n    }\n\n    throw err\n  }\n  useIsomorphicLayoutEffect(() => {\n    latestSelector.current = selector\n    latestSelectedState.current = selectedState\n    latestSubscriptionCallbackError.current = undefined\n  })\n\n  useIsomorphicLayoutEffect(\n    () => {\n      function checkForUpdates() {\n        try {\n          const newSelectedState = latestSelector.current(getSlate())\n\n          if (equalityFn(newSelectedState, latestSelectedState.current)) {\n            return\n          }\n\n          latestSelectedState.current = newSelectedState\n        } catch (err) {\n          // we ignore all errors here, since when the component\n          // is re-rendered, the selectors are called again, and\n          // will throw again, if neither props nor store state\n          // changed\n          latestSubscriptionCallbackError.current = err\n        }\n\n        forceRender()\n      }\n\n      const unsubscribe = addEventListener(checkForUpdates)\n\n      checkForUpdates()\n\n      return () => unsubscribe()\n    },\n    // don't rerender on equalityFn change since we want to be able to define it inline\n    [addEventListener, getSlate]\n  )\n\n  return selectedState\n}\n\n/**\n * Create selector context with editor updating on every editor change\n */\nexport function getSelectorContext(editor: Editor) {\n  const eventListeners = useRef<EditorChangeHandler[]>([]).current\n  const slateRef = useRef<{\n    editor: Editor\n  }>({\n    editor,\n  }).current\n  const onChange = useCallback((editor: Editor) => {\n    slateRef.editor = editor\n    eventListeners.forEach((listener: EditorChangeHandler) => listener(editor))\n  }, [])\n\n  const selectorContext = useMemo(() => {\n    return {\n      getSlate: () => slateRef.editor,\n      addEventListener: (callback: EditorChangeHandler) => {\n        eventListeners.push(callback)\n        return () => {\n          eventListeners.splice(eventListeners.indexOf(callback), 1)\n        }\n      },\n    }\n  }, [eventListeners, slateRef])\n  return { selectorContext, onChange }\n}\n","import React, { useMemo, useState, useCallback, useEffect, useRef } from 'react'\nimport { Editor, Node, Element, Descendant } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { FocusedContext } from '../hooks/use-focused'\nimport { EditorContext } from '../hooks/use-slate-static'\nimport { SlateContext } from '../hooks/use-slate'\nimport {\n  getSelectorContext,\n  SlateSelectorContext,\n} from '../hooks/use-slate-selector'\nimport { EDITOR_TO_ON_CHANGE } from '../utils/weak-maps'\nimport { IS_REACT_VERSION_17_OR_ABOVE } from '../utils/environment'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\n\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\n\nexport const Slate = (props: {\n  editor: ReactEditor\n  value: Descendant[]\n  children: React.ReactNode\n  onChange?: (value: Descendant[]) => void\n}) => {\n  const { editor, children, onChange, value, ...rest } = props\n  const unmountRef = useRef(false)\n\n  const [context, setContext] = React.useState<[ReactEditor]>(() => {\n    if (!Node.isNodeList(value)) {\n      throw new Error(\n        `[Slate] value is invalid! Expected a list of elements` +\n          `but got: ${JSON.stringify(value)}`\n      )\n    }\n    if (!Editor.isEditor(editor)) {\n      throw new Error(\n        `[Slate] editor is invalid! you passed:` + `${JSON.stringify(editor)}`\n      )\n    }\n    editor.children = value\n    Object.assign(editor, rest)\n    return [editor]\n  })\n\n  const {\n    selectorContext,\n    onChange: handleSelectorChange,\n  } = getSelectorContext(editor)\n\n  const onContextChange = useCallback(() => {\n    if (onChange) {\n      onChange(editor.children)\n    }\n\n    setContext([editor])\n    handleSelectorChange(editor)\n  }, [onChange])\n\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange)\n\n  useEffect(() => {\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {})\n      unmountRef.current = true\n    }\n  }, [])\n\n  const [isFocused, setIsFocused] = useState(ReactEditor.isFocused(editor))\n\n  useEffect(() => {\n    setIsFocused(ReactEditor.isFocused(editor))\n  })\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    if (IS_REACT_VERSION_17_OR_ABOVE) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn)\n      document.addEventListener('focusout', fn)\n      return () => {\n        document.removeEventListener('focusin', fn)\n        document.removeEventListener('focusout', fn)\n      }\n    } else {\n      document.addEventListener('focus', fn, true)\n      document.addEventListener('blur', fn, true)\n      return () => {\n        document.removeEventListener('focus', fn, true)\n        document.removeEventListener('blur', fn, true)\n      }\n    }\n  }, [])\n\n  return (\n    <SlateSelectorContext.Provider value={selectorContext}>\n      <SlateContext.Provider value={context}>\n        <EditorContext.Provider value={editor}>\n          <FocusedContext.Provider value={isFocused}>\n            {children}\n          </FocusedContext.Provider>\n        </EditorContext.Provider>\n      </SlateContext.Provider>\n    </SlateSelectorContext.Provider>\n  )\n}\n","/**\n * Utilities for single-line deletion\n */\n\nimport { Range, Editor } from 'slate'\nimport { ReactEditor } from '..'\n\nconst doRectsIntersect = (rect: DOMRect, compareRect: DOMRect) => {\n  const middle = (compareRect.top + compareRect.bottom) / 2\n\n  return rect.top <= middle && rect.bottom >= middle\n}\n\nconst areRangesSameLine = (\n  editor: ReactEditor,\n  range1: Range,\n  range2: Range\n) => {\n  const rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect()\n  const rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect()\n\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1)\n}\n\n/**\n * A helper utility that returns the end portion of a `Range`\n * which is located on a single line.\n *\n * @param {Editor} editor The editor object to compare against\n * @param {Range} parentRange The parent range to compare against\n * @returns {Range} A valid portion of the parentRange which is one a single line\n */\nexport const findCurrentLineRange = (\n  editor: ReactEditor,\n  parentRange: Range\n): Range => {\n  const parentRangeBoundary = Editor.range(editor, Range.end(parentRange))\n  const positions = Array.from(Editor.positions(editor, { at: parentRange }))\n\n  let left = 0\n  let right = positions.length\n  let middle = Math.floor(right / 2)\n\n  if (\n    areRangesSameLine(\n      editor,\n      Editor.range(editor, positions[left]),\n      parentRangeBoundary\n    )\n  ) {\n    return Editor.range(editor, positions[left], parentRangeBoundary)\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(\n      editor,\n      positions[positions.length - 1],\n      parentRangeBoundary\n    )\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (\n      areRangesSameLine(\n        editor,\n        Editor.range(editor, positions[middle]),\n        parentRangeBoundary\n      )\n    ) {\n      right = middle\n    } else {\n      left = middle\n    }\n\n    middle = Math.floor((left + right) / 2)\n  }\n\n  return Editor.range(editor, positions[right], parentRangeBoundary)\n}\n","import ReactDOM from 'react-dom'\nimport { Editor, Node, Path, Operation, Transforms, Range } from 'slate'\n\nimport { ReactEditor } from './react-editor'\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_KEY_TO_ELEMENT,\n  EDITOR_TO_ON_CHANGE,\n  NODE_TO_KEY,\n  EDITOR_TO_USER_SELECTION,\n} from '../utils/weak-maps'\nimport {\n  isDOMText,\n  getPlainText,\n  getSlateFragmentAttribute,\n} from '../utils/dom'\nimport { findCurrentLineRange } from '../utils/lines'\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withReact = <T extends Editor>(editor: T) => {\n  const e = editor as T & ReactEditor\n  const { apply, onChange, deleteBackward } = e\n\n  // The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to\n  // avoid collisions between editors in the DOM that share the same value.\n  EDITOR_TO_KEY_TO_ELEMENT.set(e, new WeakMap())\n\n  e.deleteBackward = unit => {\n    if (unit !== 'line') {\n      return deleteBackward(unit)\n    }\n\n    if (editor.selection && Range.isCollapsed(editor.selection)) {\n      const parentBlockEntry = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: editor.selection,\n      })\n\n      if (parentBlockEntry) {\n        const [, parentBlockPath] = parentBlockEntry\n        const parentElementRange = Editor.range(\n          editor,\n          parentBlockPath,\n          editor.selection.anchor\n        )\n\n        const currentLineRange = findCurrentLineRange(e, parentElementRange)\n\n        if (!Range.isCollapsed(currentLineRange)) {\n          Transforms.delete(editor, { at: currentLineRange })\n        }\n      }\n    }\n  }\n\n  // This attempts to reset the NODE_TO_KEY entry to the correct value\n  // as apply() changes the object reference and hence invalidates the NODE_TO_KEY entry\n  e.apply = (op: Operation) => {\n    const matches: [Path, Key][] = []\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n      case 'split_node': {\n        matches.push(...getMatches(e, op.path))\n        break\n      }\n\n      case 'set_selection': {\n        // Selection was manually set, don't restore the user selection after the change.\n        EDITOR_TO_USER_SELECTION.get(editor)?.unref()\n        EDITOR_TO_USER_SELECTION.delete(editor)\n        break\n      }\n\n      case 'insert_node':\n      case 'remove_node': {\n        matches.push(...getMatches(e, Path.parent(op.path)))\n        break\n      }\n\n      case 'merge_node': {\n        const prevPath = Path.previous(op.path)\n        matches.push(...getMatches(e, prevPath))\n        break\n      }\n\n      case 'move_node': {\n        const commonPath = Path.common(\n          Path.parent(op.path),\n          Path.parent(op.newPath)\n        )\n        matches.push(...getMatches(e, commonPath))\n        break\n      }\n    }\n\n    apply(op)\n\n    for (const [path, key] of matches) {\n      const [node] = Editor.node(e, path)\n      NODE_TO_KEY.set(node, key)\n    }\n  }\n\n  e.setFragmentData = (data: Pick<DataTransfer, 'getData' | 'setData'>) => {\n    const { selection } = e\n\n    if (!selection) {\n      return\n    }\n\n    const [start, end] = Range.edges(selection)\n    const startVoid = Editor.void(e, { at: start.path })\n    const endVoid = Editor.void(e, { at: end.path })\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return\n    }\n\n    // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n    const domRange = ReactEditor.toDOMRange(e, selection)\n    let contents = domRange.cloneContents()\n    let attach = contents.childNodes[0] as HTMLElement\n\n    // Make sure attach is non-empty, since empty nodes will not get copied.\n    contents.childNodes.forEach(node => {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node as HTMLElement\n      }\n    })\n\n    // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n    if (endVoid) {\n      const [voidNode] = endVoid\n      const r = domRange.cloneRange()\n      const domNode = ReactEditor.toDOMNode(e, voidNode)\n      r.setEndAfter(domNode)\n      contents = r.cloneContents()\n    }\n\n    // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]')! as HTMLElement\n    }\n\n    // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n      zw => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      }\n    )\n\n    // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n    if (isDOMText(attach)) {\n      const span = attach.ownerDocument.createElement('span')\n      // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n      span.style.whiteSpace = 'pre'\n      span.appendChild(attach)\n      contents.appendChild(span)\n      attach = span\n    }\n\n    const fragment = e.getFragment()\n    const string = JSON.stringify(fragment)\n    const encoded = window.btoa(encodeURIComponent(string))\n    attach.setAttribute('data-slate-fragment', encoded)\n    data.setData('application/x-slate-fragment', encoded)\n\n    // Add the content to a <div> so that we can get its inner HTML.\n    const div = contents.ownerDocument.createElement('div')\n    div.appendChild(contents)\n    div.setAttribute('hidden', 'true')\n    contents.ownerDocument.body.appendChild(div)\n    data.setData('text/html', div.innerHTML)\n    data.setData('text/plain', getPlainText(div))\n    contents.ownerDocument.body.removeChild(div)\n    return data\n  }\n\n  e.insertData = (data: DataTransfer) => {\n    if (!e.insertFragmentData(data)) {\n      e.insertTextData(data)\n    }\n  }\n\n  e.insertFragmentData = (data: DataTransfer): boolean => {\n    /**\n     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment\n     */\n    const fragment =\n      data.getData('application/x-slate-fragment') ||\n      getSlateFragmentAttribute(data)\n\n    if (fragment) {\n      const decoded = decodeURIComponent(window.atob(fragment))\n      const parsed = JSON.parse(decoded) as Node[]\n      e.insertFragment(parsed)\n      return true\n    }\n    return false\n  }\n\n  e.insertTextData = (data: DataTransfer): boolean => {\n    const text = data.getData('text/plain')\n\n    if (text) {\n      const lines = text.split(/\\r\\n|\\r|\\n/)\n      let split = false\n\n      for (const line of lines) {\n        if (split) {\n          Transforms.splitNodes(e, { always: true })\n        }\n\n        e.insertText(line)\n        split = true\n      }\n      return true\n    }\n    return false\n  }\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      const onContextChange = EDITOR_TO_ON_CHANGE.get(e)\n\n      if (onContextChange) {\n        onContextChange()\n      }\n\n      onChange()\n    })\n  }\n\n  return e\n}\n\nconst getMatches = (e: Editor, path: Path) => {\n  const matches: [Path, Key][] = []\n  for (const [n, p] of Editor.levels(e, { at: path })) {\n    const key = ReactEditor.findKey(e, n)\n    matches.push([p, key])\n  }\n  return matches\n}\n","// Components\n// Environment-dependent Editable\nimport { Editable as DefaultEditable } from './components/editable'\nimport { AndroidEditable } from './components/android/android-editable'\nimport { IS_ANDROID } from './utils/environment'\n\nexport const Editable = IS_ANDROID ? AndroidEditable : DefaultEditable\nexport {\n  Editable as DefaultEditable,\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n  DefaultPlaceholder,\n} from './components/editable'\nexport { AndroidEditable } from './components/android/android-editable'\nexport { DefaultElement } from './components/element'\nexport { DefaultLeaf } from './components/leaf'\nexport { Slate } from './components/slate'\n\n// Hooks\nexport { useEditor } from './hooks/use-editor'\nexport { useSlateStatic } from './hooks/use-slate-static'\nexport { useFocused } from './hooks/use-focused'\nexport { useReadOnly } from './hooks/use-read-only'\nexport { useSelected } from './hooks/use-selected'\nexport { useSlate } from './hooks/use-slate'\nexport { useSlateSelector } from './hooks/use-slate-selector'\n\n// Plugin\nexport { ReactEditor } from './plugin/react-editor'\nexport { withReact } from './plugin/with-react'\n","export const TRIPLE_CLICK = 3\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","'use strict'\n\nmodule.exports = direction\n\nvar RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC'\nvar LTR =\n  'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' +\n  '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' +\n  '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF'\n\nvar rtl = new RegExp('^[^' + LTR + ']*[' + RTL + ']')\nvar ltr = new RegExp('^[^' + RTL + ']*[' + LTR + ']')\n\nfunction direction(value) {\n  value = String(value || '')\n\n  if (rtl.test(value)) {\n    return 'rtl'\n  }\n\n  if (ltr.test(value)) {\n    return 'ltr'\n  }\n\n  return 'neutral'\n}\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n",null,"var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","var debounce = require('./debounce'),\n    isObject = require('./isObject');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nmodule.exports = throttle;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\nvar IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\nvar ALIASES = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n};\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n"],"names":["root","require","module","exports","Date","now","t","nodeType","e","n","clientHeight","scrollHeight","clientWidth","scrollWidth","r","getComputedStyle","overflowY","overflowX","ownerDocument","defaultView","frameElement","i","o","l","d","window","scrollMode","block","f","inline","h","boundary","u","skipOverflowHiddenElements","s","TypeError","a","c","g","document","scrollingElement","documentElement","p","m","parentElement","getRootNode","host","push","body","w","visualViewport","width","innerWidth","v","height","innerHeight","W","scrollX","pageXOffset","H","scrollY","pageYOffset","b","getBoundingClientRect","y","E","M","top","V","right","x","bottom","I","left","C","R","T","k","length","B","D","O","X","Y","L","S","j","N","q","parseInt","borderLeftWidth","z","borderTopWidth","A","borderRightWidth","F","borderBottomWidth","G","J","K","offsetWidth","P","offsetHeight","Q","U","Math","max","Z","scrollLeft","$","scrollTop","min","el","isOptionsObject","options","Object","keys","target","isTargetAttached","isConnected","contains","behavior","compute","computeOptions","getOptions","actions","canSmoothScroll","style","forEach","_ref","scroll","defaultBehavior","_defineProperty","obj","key","value","defineProperty","enumerable","configurable","writable","_objectWithoutProperties","source","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","IS_REACT_VERSION_17_OR_ABOVE","React","split","IS_IOS","navigator","test","userAgent","MSStream","IS_APPLE","IS_ANDROID","IS_FIREFOX","IS_SAFARI","IS_EDGE_LEGACY","IS_CHROME","IS_CHROME_LEGACY","IS_FIREFOX_LEGACY","IS_QQBROWSER","IS_UC_MOBILE","IS_WECHATBROWSER","CAN_USE_DOM","createElement","HAS_BEFORE_INPUT_SUPPORT","globalThis","InputEvent","getTargetRanges","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","String","props","isLast","leaf","parent","text","editor","useSlateStatic","path","ReactEditor","findPath","parentPath","Path","isVoid","ZeroWidthString","Node","string","children","isInline","Editor","slice","TextString","isTrailing","isLineBreak","ref","useRef","getTextContent","concat","textWithTrailing","current","textContent","NODE_TO_INDEX","WeakMap","NODE_TO_PARENT","EDITOR_TO_WINDOW","EDITOR_TO_ELEMENT","ELEMENT_TO_NODE","NODE_TO_ELEMENT","NODE_TO_KEY","EDITOR_TO_KEY_TO_ELEMENT","IS_READ_ONLY","IS_FOCUSED","IS_COMPOSING","IS_ON_COMPOSITION_END","EDITOR_TO_USER_SELECTION","EDITOR_ON_COMPOSITION_TEXT","EDITOR_TO_ON_CHANGE","NODE_TO_RESTORE_DOM","PLACEHOLDER_SYMBOL","Symbol","Leaf","renderPlaceholder","renderLeaf","DefaultLeaf","assign","placeholderRef","placeholderEl","editorEl","querySelector","minHeight","placeholderProps","placeholder","attributes","position","pointerEvents","maxWidth","display","opacity","userSelect","textDecoration","contentEditable","MemoizedLeaf","prev","next","Text$1","equals","shallowCompare","obj1","obj2","every","hasOwnProperty","isDecoratorRangeListEqual","list","another","range","other","rangeOwnProps","_excluded$3","otherOwnProps","_excluded2","Range","useContentKey","node","contentKeyRef","updateAnimationFrameRef","setForceRerenderCounter","useState","set","requestAnimationFrame","state","delete","cancelAnimationFrame","Text","decorations","leaves","findKey","id","KEY_TO_ELEMENT","get","contentKey","undefined","MemoizedText","Element","element","renderElement","DefaultElement","selection","readOnly","useReadOnly","useChildren","hasInlines","dir","getDirection","Tag","_text","texts","color","outline","content","Fragment","MemoizedElement","EditorContext","createContext","useContext","Error","SelectedContext","useSelected","isLeafBlock","Element$1","isElement","sel","intersection","ds","reduce","acc","dec","Provider","_loop","HOTKEYS","bold","compose","moveBackward","moveForward","moveWordBackward","moveWordForward","deleteBackward","deleteForward","extendBackward","extendForward","italic","insertSoftBreak","splitBlock","undo","APPLE_HOTKEYS","moveLineBackward","moveLineForward","deleteLineBackward","deleteLineForward","deleteWordBackward","deleteWordForward","extendLineBackward","extendLineForward","redo","transposeCharacter","WINDOWS_HOTKEYS","create","generic","apple","windows","isGeneric","isKeyHotkey","isApple","isWindows","event","Hotkeys","isBold","isCompose","isMoveBackward","isMoveForward","isDeleteBackward","isDeleteForward","isDeleteLineBackward","isDeleteLineForward","isDeleteWordBackward","isDeleteWordForward","isExtendBackward","isExtendForward","isExtendLineBackward","isExtendLineForward","isItalic","isMoveLineBackward","isMoveLineForward","isMoveWordBackward","isMoveWordForward","isRedo","isSoftBreak","isSplitBlock","isTransposeCharacter","isUndo","ReadOnlyContext","SlateContext","useSlate","context","DecorateContext","getDefaultView","isDOMComment","isDOMNode","isDOMElement","isDOMSelection","anchorNode","Selection","isDOMText","getEditableChildAndIndex","index","direction","childNodes","child","triedForward","triedBackward","getAttribute","getEditableChild","getPlainText","domNode","nodeValue","childNode","Array","from","getPropertyValue","tagName","catchSlateFragment","getSlateFragmentAttribute","dataTransfer","htmlData","getData","fragment","match","Children","DefaultPlaceholder","_ref2","defaultDecorate","defaultScrollSelectionIntoView","domRange","isCollapsed","leafEl","startContainer","bind","scrollIntoView","hasTarget","hasDOMNode","hasEditableTarget","editable","isTargetInsideNonReadonlyVoid","slateNode","toSlateNode","isEventHandled","handler","shouldTreatEventAsHandled","isDefaultPrevented","isPropagationStopped","isDOMEventHandled","defaultPrevented","getDiffOffsets","start","charAt","getDiffStart","end","prevLength","nextLength","getDiffEnd","sliceText","offsets","getTextInsertion","isText","prevText","nextText","endsWith","textDiff","insertText","removeText","diffText","normalizeTextInsertionRange","insertionRange","anchor","offset","focus","nodes","at","characterBeforeAnchor","characterAfterAnchor","Key","constructor","this","isComposing","getWindow","isEditor","unshift","JSON","stringify","findDocumentOrShadowRoot","toDOMNode","Document","ShadowRoot","getSelection","isFocused","isReadOnly","blur","activeElement","preventScroll","deselect","domSelection","rangeCount","removeAllRanges","Transforms","targetEl","arguments","err","message","includes","closest","isContentEditable","insertData","data","insertFragmentData","insertTextData","setFragmentData","originEvent","toDOMPoint","point","domPoint","void","querySelectorAll","attr","toDOMRange","isBackward","domAnchor","domFocus","createRange","startNode","startOffset","endNode","endOffset","isStartAtZeroWidth","isEndAtZeroWidth","setStart","setEnd","domEl","hasAttribute","findEventRange","nativeEvent","clientX","clientY","rect","isPrev","edge","before","after","caretRangeFromPoint","caretPositionFromPoint","offsetNode","toSlateRange","exactMatch","suppressThrow","toSlatePoint","nearestNode","nearestOffset","normalizeDOMPoint","parentNode","textNode","_domNode$textContent","potentialVoidNode","voidNode","leafNode","contents","cloneContents","removeChild","anchorOffset","focusNode","focusOffset","shadowRoot","endContainer","collapsed","isExpanded","isForward","mode","unhangRange","voids","hasRange","hasPath","AndroidInputManager","restoreDOM","flush","mutations","reconcileMutations","console","error","mutationData","addedNodes","removedNodes","insertedText","characterDataMutations","mutation","type","addedNode","removedNode","textInsertion","some","gatherMutationData","isReplaceExpandedSelection","_ref4","_ref5","combineInsertedText","replaceExpandedSelection","parentDOMNode","HTMLElement","insertBreak","isRemoveLeafNodes","_","_ref7","removeLeafNodes","isDeletion","_ref3","isTextInsertion","_ref6","insertion","setSelection","setTimeout","move","deleteFragment","useMutationObserver","callback","mutationObserver","MutationObserver","disconnect","observe","MUTATION_OBSERVER_CONFIG$1","childList","characterData","subtree","findClosestKnowSlateNode","_domEl","useRestoreDom","receivedUserInput","mutatedNodes","Set","useCallback","add","clear","restore","mutated","values","nodesToRestore","filter","isParent","_NODE_TO_RESTORE_DOM$","MUTATION_OBSERVER_CONFIG","characterDataOldValue","useAndroidInputManager","onUserInput","animationFrameRef","useTrackUserInput","restoreDom","inputManager","useMemo","timeoutId","isReconciling","clearTimeout","FocusedContext","useFocused","SlateSelectorContext","Slate","onChange","rest","_excluded","unmountRef","setContext","isNodeList","selectorContext","handleSelectorChange","eventListeners","slateRef","listener","getSlate","addEventListener","splice","getSelectorContext","onContextChange","setIsFocused","fn","removeEventListener","doRectsIntersect","compareRect","middle","areRangesSameLine","range1","range2","rect1","rect2","withReact","apply","unit","parentBlockEntry","above","isBlock","parentBlockPath","parentElementRange","currentLineRange","findCurrentLineRange","parentRange","parentRangeBoundary","positions","floor","op","matches","getMatches","_EDITOR_TO_USER_SELEC","unref","prevPath","previous","commonPath","common","newPath","edges","startVoid","endVoid","attach","trim","cloneRange","setEndAfter","zw","isNewline","span","whiteSpace","appendChild","getFragment","encoded","btoa","encodeURIComponent","setAttribute","setData","div","innerHTML","decoded","decodeURIComponent","atob","parsed","parse","insertFragment","lines","line","splitNodes","always","ReactDOM","levels","Editable","autoFocus","decorate","onDOMBeforeInput","propsOnDOMBeforeInput","as","Component","_excluded$1","setIsComposing","isUpdatingSelection","latestElement","hasDomSelection","editorElement","hasDomSelectionInEditor","slateRange","newDomRange","setBaseAndExtent","_unused","onDOMSelectionChange","throttle","anchorNodeSelectable","focusNodeSelectable","select","_unused2","scheduleOnDOMSelectionChange","debounce","role","spellCheck","autoCorrect","autoCapitalize","suppressContentEditableWarning","_objectSpread","wordWrap","onCopy","preventDefault","clipboardData","onCut","onFocus","onBlur","relatedTarget","onClick","_start","onCompositionEnd","onCompositionUpdate","onCompositionStart","onPaste","DataTransfer","types","getClipboardData","scrollSelectionIntoView","_excluded$2","deferredOperations","hasInsertPrefixInCompositon","isDraggingInternally","inputType","native","_node$parentElement","marks","_lastText$textContent","lastText","createTreeWalker","NodeFilter","SHOW_TEXT","lastChild","startsWith","targetRange","selectionRef","rangeRef","_selection","name","toRestore","flatMap","zindex","_objectSpread$1","onBeforeInput","onInput","detail","blockPath","_block$","_range","leafPath","currentTextNode","withoutNormalizing","replace","distance","reverse","inlinePath","isEnd","insertNodes","onDragOver","onDragStart","onDrop","draggedRange","onDragEnd","onKeyDown","isRTL","maybeHistoryEditor","_maybeHistoryEditor","collapse","currentNode","isPlainTextOnlyPaste","reWhitespace","baseGetTag","isObjectLike","rtl","ltr","RTL","LTR","RegExp","baseTrim","isObject","isSymbol","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","valueOf","isBinary","DialogContext","useDialogIsVisible","_a","visible","useSetDialogIsVisible","setVisible","_b","__read","trimmedEndIndex","reTrimStart","func","wait","leading","trailing","IS_MAC","platform","MODIFIERS","alt","control","meta","shift","ALIASES","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","CODES","backspace","tab","enter","pause","capslock","escape","pageup","pagedown","home","arrowleft","arrowup","arrowright","arrowdown","insert","numlock","scrolllock","isHotkey","hotkey","isArray","array","map","parseHotkey","check","object","compareHotkey","byKey","ret","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","done","optional","toKeyName","modifier","which","toKeyCode","expected","actual","toLowerCase","toUpperCase","charCodeAt","toNumber","nativeMax","nativeMin","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","maxing","invokeFunc","time","args","thisArg","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","cancel"],"sourceRoot":""}